---

__sd_ngx_recompile_modules:
  name: ngx-recompile-modules
  service:
    content: |
      [Unit]
      Description=Make sure there are no outdated nginx modules

      [Service]
      Type=oneshot
      Environment=MAIL_TO={{ my_email }}
      Environment=WORK_DIR=/srv/general/nginx
      Environment=NGX_MOD_PATH={{ nginx_modules_path }}
      ExecStart={{ systemd_script_install_path }}/ngx-recompile-modules

      [Install]
      WantedBy=multi-user.target

  # Every day at 03:05
  timer:
    enabled: true
    state: started
    content: |
      [Unit]
      Description=Make sure there are no outdated nginx modules timer

      [Timer]
      Persistent=yes
      OnCalendar=*-*-* 03:05:00

      [Install]
      WantedBy=timers.target

  scripts:
    - dest: "{{ systemd_script_install_path }}/ngx-recompile-modules"
      content: |
        #!/usr/bin/env python3

        import os
        import shutil
        import subprocess

        from typing import Tuple

        import requests


        WORK_DIR = os.getenv('WORK_DIR', '/srv/general/nginx')
        NGX_MOD_PATH = os.getenv('NGX_MOD_PATH', '/usr/lib64/nginx/modules')


        def main() -> Tuple[list, bool]:
            status_lines = []
            # Get current nginx version and args
            p = subprocess.run(['nginx', '-V'], capture_output=True, encoding='utf-8')
            # Outputs to stderr?
            ngx_out = p.stderr.split('\n')
            ngx_ver = ngx_out[0].split(': ')[1].replace('/', '-')
            ngx_args = ngx_out[-2].replace('configure arguments: ', '')
            ngx_path = os.path.join(WORK_DIR, ngx_ver)
            # Nothing to do if version matches
            if os.path.exists(ngx_path):
                status_lines.append('Nginx source matches installed version.')
                return status_lines, True

            # Download matching source code
            url = F"http://nginx.org/download/{ngx_ver}.tar.gz"
            try:
                r = requests.get(url)
                status_lines.append(f'Downloaded {ngx_ver}')
            except Exception as e:
                status_lines.append(F"Cannot download {ngx_ver}: {str(e)}")
                return status_lines, False
            else:
                fp = f'/tmp/{ngx_ver}.tar.gz'
                with open(fp, 'wb') as fw:
                    fw.write(r.content)
                shutil.unpack_archive(filename=fp, extract_dir=WORK_DIR, format='gztar')
                os.unlink(fp)
                status_lines.append(f'{ngx_ver} tarball unpacked')

            # Check dynamic module source
            dyn_mods = {
                'rtmp-module': {
                    'file': 'ngx_rtmp_module.so',
                    'git': 'https://github.com/arut/nginx-rtmp-module.git',
                    'branch': 'master'
                },
                'dav-ext-module': {
                    'file': 'ngx_http_dav_ext_module.so',
                    'git': 'https://github.com/arut/nginx-dav-ext-module.git',
                    'branch': 'master'
                }
            }
            cfg_args = ngx_args
            for k, v in dyn_mods.items():
                src_path = os.path.join(WORK_DIR, k)
                if not os.path.exists(src_path):
                    status_lines.append(f'{k} missing, downloading.')
                    p = subprocess.run(['git', 'clone', '--single-branch', '--branch', v['branch'], v['git'], src_path], capture_output=True, encoding='utf-8')
                    if p.returncode != 0:
                        status_lines.append(f'Git failed: {str(p.stderr)}')
                        continue
                cfg_args += f' --add-dynamic-module={src_path}'

            os.chdir(ngx_path)

            status_lines.append(f'### Configure ###\n{cfg_args}')
            p = subprocess.run(f'./configure {cfg_args}', shell=True, capture_output=True, encoding='utf-8')
            if p.returncode != 0:
                status_lines.append(f'### Configure failed ###\n{str(p.stdout)}{str(p.stderr)}\n### Configure failed ###')
                return status_lines, False
            with open(os.path.join(WORK_DIR, 'configure.log'), 'w') as fw:
                fw.write(p.stdout)
                fw.write(p.stderr)
            status_lines.append('### Configure completed ###')

            p = subprocess.run(['make', 'modules'], capture_output=True, encoding='utf-8')
            if p.returncode != 0:
                status_lines.append(f'### Make failed ###\n{str(p.stdout)}{str(p.stderr)}\n### Make failed ###')
                return status_lines, False

            with open(os.path.join(WORK_DIR, 'make.log'), 'w') as fw:
                fw.write(p.stdout)
                fw.write(p.stderr)
            status_lines.append('### Make completed ###')

            # Root required to continue
            if os.geteuid() != 0:
                status_lines.append('Not root, cannot copy modules.')
                return status_lines, False
            # Move compiled modules
            for v in dyn_mods.values():
                mod_src = os.path.join(ngx_path, 'objs', v["file"])
                mod_dest = os.path.join(NGX_MOD_PATH, v["file"])
                shutil.copyfile(mod_src, mod_dest)
                os.chmod(mod_dest, 0o755)
                status_lines.append(f'Copied to {mod_dest}')

            # Restart nginx
            p = subprocess.run(['systemctl', 'restart', 'nginx'], capture_output=True, encoding='utf-8')
            if p.returncode != 0:
                status_lines.append(f'### Nginx restart failed ###\n{str(p.stdout)}{str(p.stderr)}\n### Nginx restart failed ###')
                return status_lines, False
            return status_lines, True


        def send_mail(body: str):
            mail_address = os.getenv('MAIL_TO', '')
            if not mail_address:
                print('Cannot send mail, address missing')
                return
            subprocess.run(['mail', '-s', 'nginx module compile failed', mail_address], input=body, text=True)


        if __name__ == "__main__":
            lines, ok = main()
            ret_str = '\n'.join(lines)
            print(ret_str)
            if not ok:
                send_mail(ret_str)
                exit(1)
