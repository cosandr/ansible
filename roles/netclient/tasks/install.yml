---
- block:
    - name: Get latest release
      uri:
        url: "https://api.github.com/repos/gravitl/netmaker/releases/latest"
        method: GET
        return_content: true
        status_code: 200
        body_format: json
        validate_certs: false
      register: _latest_release
      until: _latest_release.status == 200
      retries: 5
      check_mode: false

    - name: "Set netclient version to {{ _latest_release.json.tag_name }}"
      set_fact:
        netclient_version: "{{ _latest_release.json.tag_name }}"
  when:
    - netclient_version == "latest"

- name: download netclient binary to local folder
  become: false
  get_url:
    url: "https://github.com/gravitl/netmaker/releases/download/{{ 'v' if netclient_version != 'latest' else '' }}{{ netclient_version }}/netclient{{ netclient_arch }}"
    dest: "/tmp/netclient-{{ netclient_version }}{{ netclient_arch }}"
  register: _download_archive
  until: _download_archive is succeeded
  retries: 5
  delay: 2
  run_once: true
  delegate_to: localhost
  check_mode: false

- name: create netclient dir
  file:
    path: "{{ netclient_home }}/config"
    state: directory
    mode: 0750
    owner: root
    group: root

- name: propagate official netclient binary
  copy:
    src: "/tmp/netclient-{{ netclient_version }}{{ netclient_arch }}"
    dest: "{{ netclient_home }}/netclient"
    mode: 0755
    owner: root
    group: root
  notify: enable and start netclient timer

- name: symlink binary
  file:
    src: "{{ netclient_home }}/netclient"
    dest: "{{ _netclient_binary_install_dir }}/netclient"
    state: link

- block:
    - name: Get SELinux context
      shell: semanage fcontext -l | grep -c '{{ netclient_home }}/netclient'
      check_mode: false
      changed_when: false
      failed_when: __fcontext.rc not in [0, 1]
      register: __fcontext

    - name: Set SELinux context
      command: semanage fcontext -a -t bin_t '{{ netclient_home }}/netclient'
      changed_when:
      when:
        - __fcontext is defined
        - __fcontext.stdout == '0'

    - name: Restore SELinux context
      command: restorecon -v "{{ netclient_home }}/netclient"
      register: __restorecon
      changed_when: "'Relabeled' in  __restorecon.stdout"

  when: ansible_selinux.status == "enabled"
