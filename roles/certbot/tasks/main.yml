---

- name: Install prerequisites
  apt:
    name:
      - python3.9
      - python3.9-venv
      - libaugeas0
    update_cache: true
    state: present
  when: ansible_os_family == 'Debian'
  tags: ["install"]

- name: Install prerequisites
  dnf:
    name:
      - python39
      - augeas-libs
    state: present
  when: ansible_os_family == 'RedHat'
  tags: ["install"]

- name: Install prerequisites
  community.general.pkgng:
    name:
      - python39
      - gcc   # Required to compile cryptography
      - rust  # Required to compile cryptography
      - augeas
    state: present
  when: ansible_os_family == 'FreeBSD'
  tags: ["install"]

- name: Include platform specific vars
  include_vars: "{{ ansible_system }}.yml"
  tags: ["install"]

- name: Setup venv  # noqa package-latest
  pip:
    name:
      - pip
      - setuptools
      - wheel
    umask: "0077"
    state: latest
    virtualenv: "{{ certbot_venv_path }}"
    virtualenv_command: "{{ __python_bin_path }} -m venv"
  tags: ["install"]

- name: Install certbot
  pip:
    name: "{{ certbot_pkgs + certbot_extra_pkgs }}"
    umask: "0077"
    virtualenv: "{{ certbot_venv_path }}"
  tags: ["install"]

- name: Ensure bin link exists
  file:
    src: "{{ certbot_venv_path }}/bin/certbot"
    dest: "{{ __certbot_bin_path }}"
    state: link
  tags: ["install"]

- name: Configure services if possible
  include_tasks: "{{ item }}"
  with_first_found:
    - files: ["{{ ansible_system }}.yml"]
      skip: true
  when: certbot_auto_renew | bool
  tags: ["install"]

- name: Ensure /etc/letsencrypt exists
  file:
    path: "/etc/letsencrypt"
    state: directory
    owner: root
    group: "{{ __root_group }}"
    mode: 0755

- name: Configure certbot
  copy:
    dest: "/etc/letsencrypt/cli.ini"
    owner: root
    group: "{{ __root_group }}"
    mode: 0600
    content: |
      rsa-key-size = 4096
      email = {{ certbot_email }}
      agree-tos = true
  when: certbot_email | length > 0

- name: Add credentials
  copy:
    dest: "{{ certbot_credentials_path }}"
    owner: root
    group: "{{ __root_group }}"
    mode: 0600
    content: "{{ certbot_credentials_content }}"
  when: certbot_credentials_content | length > 0

- name: Get certificates
  command: "{{ certbot_generate_command }} -d '{{ item }}'"
  register: output
  changed_when:
    - output.rc == 0
    - "'Certificate not yet due for renewal; no action taken.' not in output.stdout"
  loop: "{{ certbot_domains }}"
  tags: ["fetch"]
