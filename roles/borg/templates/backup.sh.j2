{%- set archive_name = conf.archive_name | default(conf.name) -%}
{%- set archive_path = conf.archive_path | default(conf.name) -%}
{%- if conf.ssh_check is defined -%}
{%- set ssh_check = conf.ssh_check -%}
{%- elif conf.target_host is defined and hostvars[conf.target_host].borg_ssh_check is defined -%}
{%- set ssh_check = hostvars[conf.target_host].borg_ssh_check -%}
{%- else -%}
{%- set ssh_check = "" -%}
{%- endif -%}
#!/bin/bash

{% if __borg_is_unraid %}
#name=backup-{{ conf.name }}
#description=Borg backup for {{ conf.name }}
#arrayStarted=true
#noParity=true
{% endif %}
{{ ansible_managed | comment }}
trap 'echo Backup interrupted >&2; exit 2' INT TERM

{% if conf.passphrase is defined %}
export BORG_PASSPHRASE='{{ conf.passphrase }}'
{% endif %}
{% if conf.repo is defined %}
export BORG_REPO="{{ conf.repo }}"
{% elif conf.target_host is defined and hostvars[conf.target_host].borg_remote_repo is defined %}
export BORG_REPO="{{ hostvars[conf.target_host].borg_remote_repo }}/{{ archive_path }}"
{% elif conf.target_host is not defined and borg_server %}
export BORG_REPO="{{ borg_pool }}/{{ borg_repo_name }}/{{ archive_path }}"
{% endif %}
{% if conf.remote_path is defined %}
export BORG_REMOTE_PATH="{{ conf.remote_path }}"
{% endif %}
{% if ssh_check %}
if ! ssh -q -o "BatchMode=yes" {{ ssh_check }} exit &>/dev/null
then
    echo "Cannot SSH into remote server"
    exit 1
fi
{% endif %}
{% if conf.pre_run is defined %}
{{ conf.pre_run }}
{% endif %}
{% if conf.post_run is defined %}
post_run() {
    {{ conf.post_run }}
}
trap post_run EXIT
{% endif %}

# Check paths
declare -a backup_paths=()
declare -a check_paths=(
{% for p in conf.paths %}
    "{{ p }}"
{% endfor %}
)
{% raw %}
for p in "${check_paths[@]}"; do
    if [[ -d "$p" ]]; then
        backup_paths+=("$p")
    else
        echo "WARN: cannot backup $p: not found"
    fi
done
if [[ ${#backup_paths[@]} -eq 0 ]]; then
    echo "No backup paths found"
    exit 1
fi
echo "Backing up ${backup_paths[*]}"

# Initialize repository if it is not already
tmp=$(borg list --short 2>&1)
if [[ "$tmp" == *"is not a valid repository"* ]] || [[ "$tmp" == *"does not exist"* ]]; then
    if ! borg init --encryption=repokey-blake2; then
        echo "Cannot initialize repository"
        exit 1
    fi
fi

echo "Starting backup"
# shellcheck disable=SC2086
{% endraw %}


borg create \
{% for a in borg_default_create_args + (conf.create_args | default([])) %}
    {{ a }} \
{% endfor %}
    ::'{{ archive_name }}-{now}' \
    ${backup_paths[*]}

backup_exit=$?

echo "Pruning repository"

borg prune \
{% for a in borg_default_prune_args + (conf.prune_args | default([])) %}
    {{ a }} \
{% endfor %}
    --glob-archives '{{ archive_name }}-*'
{% raw %}
prune_exit=$?

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

if [ ${global_exit} -eq 0 ]; then
    echo "Backup and Prune finished successfully"
elif [ ${global_exit} -eq 1 ]; then
    echo "Backup and/or Prune finished with warnings"
else
    echo "Backup and/or Prune finished with errors"
fi

exit ${global_exit}
{% endraw %}
