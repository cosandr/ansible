#!/bin/bash

{{ ansible_managed | comment }}
trap 'echo Backup interrupted >&2; exit 2' INT TERM

export BORG_PASSPHRASE='{{ item.passphrase }}'
export BORG_REPO="{{ item.repo }}"
{% if item.remote_path is defined %}
export BORG_REMOTE_PATH="{{ item.remote_path }}"
{% endif %}
{% if item.pre_run is defined %}
{{ item.pre_run }}
{% endif %}
# Check paths
declare -a backup_paths=()
declare -a check_paths=(
{% for p in item.paths %}
    "{{ p }}"
{% endfor %}
)
{% raw %}
for p in "${check_paths[@]}"; do
    if [[ -d "$p" ]]; then
        backup_paths+=("$p")
    else
        echo "WARN: cannot backup $p: not found"
    fi
done
if [[ ${#backup_paths[@]} -eq 0 ]]; then
    echo "No backup paths found"
    exit 1
fi
echo "Backing up ${backup_paths[*]}"

# Initialize repository if it is not already
tmp=$(borg list --short 2>&1)
if [[ "$tmp" == *"is not a valid repository"* ]] || [[ "$tmp" == *"does not exist"* ]]; then
    if ! borg init --encryption=repokey-blake2; then
        echo "Cannot initialize repository"
        exit 1
    fi
fi

echo "Starting backup"
# shellcheck disable=SC2086
{% endraw %}
{% set name = item.backup_name | default('{hostname}') %}

borg create \
{% for a in item.create_args %}
    {{ a }} \
{% endfor %}
    ::'{{ name }}-{now}' \
    ${backup_paths[*]}

backup_exit=$?

echo "Pruning repository"

borg prune \
    --prefix '{{ name }}-' \
{% for a in item.prune_args %}
    {{ a }} \
{% endfor %}
{% raw %}
prune_exit=$?

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

if [ ${global_exit} -eq 0 ]; then
    echo "Backup and Prune finished successfully"
elif [ ${global_exit} -eq 1 ]; then
    echo "Backup and/or Prune finished with warnings"
else
    echo "Backup and/or Prune finished with errors"
fi

exit ${global_exit}
{% endraw %}
