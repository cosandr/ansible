---
- name: Create list of only enabled units
  no_log: true
  set_fact:
    systemd_units_enabled: "{{ systemd_units_enabled | default([]) + [ item ] }}"
  when:
    - item.disabled is not defined or not item.disabled
  with_items: "{{ systemd_units }}"

- name: Ensure script install path exists
  file:
    path: "{{ systemd_script_install_path }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Create mapping of managed scripts
  set_fact:
    # <config name>: <path to j2 file>
    # Example: ansible-admin.conf: .../templates/sites/admin.conf.j2
    systemd_managed_scripts: "{{ systemd_managed_scripts|default({}) | combine( { item | basename: item } ) }}"
  loop: "{{ lookup('fileglob', 'files/scripts/*', wantlist=True) }}"

- name: List of existing managed scripts
  set_fact:
    check_scripts_exist: "{{ check_scripts_exist|default([]) + [ item | basename ] }}"
  loop: "{{ lookup('fileglob', systemd_script_install_path + '/*', wantlist=True) }}"

- block:
  - name: Delete old managed sites
    file:
      path: "{{ systemd_script_install_path }}/{{ item }}"
      state: absent
    when: item not in nginx_managed_sites
    with_items: "{{ check_scripts_exist }}"
  when: check_scripts_exist is defined and check_scripts_exist | length > 0

- name: Copy script files
  copy:
    src: "{{ item.value }}"
    dest: "{{ systemd_script_install_path }}/{{ item.key }}"
    owner: root
    group: root
    mode: 0755
  when: item.value is not regex(".*\.j2$")
  with_dict: "{{ systemd_managed_scripts }}"

- name: Initialize systemd_all_exec
  no_log: true
  set_fact:
    systemd_all_exec: []

- name: Add auto executables to systemd_all_exec
  no_log: true
  set_fact:
    systemd_all_exec: "{{ systemd_all_exec | append_exec_list(item.name, systemd_script_install_path + '/' + item.name) }}"
  with_items: "{{ systemd_units_enabled }}"
  when:
    - ( item.service is not defined or
        item.service.service is not defined or
        item.service.service.exec_start is not defined )

- name: Add explicit executables to systemd_all_exec
  no_log: true
  set_fact:
    systemd_all_exec: "{{ systemd_all_exec | append_exec_list(item.0.name, item.1) }}"
  loop: "{{lookup('subelements', systemd_units_enabled, 'service.service.exec_start', {'skip_missing': True})}}"

- name: Print systemd_all_exec
  debug:
    var: systemd_all_exec
    verbosity: 2

- name: Check all executables
  no_log: true
  shell: command -v "{{ item.1 }}" >/dev/null 2>&1
  check_mode: no
  ignore_errors: true
  register: check_exec_exist
  with_subelements:
    - "{{ systemd_all_exec }}"
    - paths

- name: Create list of missing executables
  no_log: true
  set_fact:
    systemd_failed_exec: "{{ systemd_failed_exec | default([]) + [ { 'name': item.item[0].name, 'exec': item.item[1] } ] }}"
  with_items: "{{ check_exec_exist.results }}"
  when: item.failed == true

- name: Warn about non-existing module configs
  fail:
    msg: "{{ item.exec }} was not found"
  with_items: "{{ systemd_failed_exec }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - systemd_failed_exec is defined
    - systemd_failed_exec | length > 0

- name: Create script service files 
  template:
    src: templates/unit.service.j2
    dest: "{{ systemd_unit_install_path }}/{{ item.name }}.service"
    user: root
    group: root
    mode: 0644
  with_items: "{{ systemd_units_enabled }}"

- name: Create script timer files 
  template:
    src: templates/unit.timer.j2
    dest: "{{ systemd_unit_install_path }}/{{ item.name }}.timer"
    user: root
    group: root
    mode: 0644
  when:
    - item.timer is defined
  with_items: "{{ systemd_units_enabled }}"
