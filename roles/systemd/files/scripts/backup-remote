#!/bin/bash

BORG_PASS_FILE=${BORG_PASS_FILE:-/root/borg_remote.pass}
SSH_USER=${SSH_USER:-andrei}
SSH_PORT=${SSH_PORT:-22}
CONTAINER_DATA=${CONTAINER_DATA:-/srv/containers}
BACKUP_USER=${BACKUP_USER:-andrei}
BACKUP_USER_HOME=$(getent passwd "$BACKUP_USER" | cut -d : -f 6)

if [[ -z $SSH_HOST ]]; then
    echo "SSH_HOST is required"
    exit 1
fi

# Root needs ssh key on remote server!
# command="/usr/bin/borg serve --umask=077"
# Make sure SSH works
if ! ssh -q -o "BatchMode=yes" "${SSH_USER}@${SSH_HOST}" -p "$SSH_PORT" exit &>/dev/null
then
    echo "Cannot SSH into remote server"
    exit 1
fi

# Read passphrase from word-protected file
BORG_PASSPHRASE=$(< "$BORG_PASS_FILE" )

if [[ $? -ne 0 ]]; then
    echo "Cannot read pass file"
    exit 1
fi

export BORG_PASSPHRASE
export BORG_REPO=ssh://"${SSH_USER}@${SSH_HOST}:${SSH_PORT}"/mnt/user/backup/borg_andrei
export BORG_REMOTE_PATH='/usr/bin/borg'
# Check paths
declare -a backup_paths=()
declare -a check_paths=(
    "/tank/backup/pgsql"
    "/tank/backup/gitea"
    "${CONTAINER_DATA}/nextcloud/data"
    "${CONTAINER_DATA}/bitwarden/data"
    "${BACKUP_USER_HOME}/src"
)
for p in "${check_paths[@]}"; do
    if [[ -d "$p" ]]; then
        backup_paths+=("$p")
    else
        echo "WARN: cannot backup $p: not found"
    fi
done
if [[ ${#backup_paths[@]} -eq 0 ]]; then
    echo "No backup paths found"
    exit 1
fi
echo "Backing up ${backup_paths[*]}"

# error handling
trap 'echo Backup interrupted >&2; exit 2' INT TERM

echo "Starting backup"

# Backup the most important directories into an archive named after
# the machine this script is currently running on:

borg create                 \
    --stats                 \
    --show-rc               \
    --compression auto,zstd \
    --exclude-caches        \
    ::'{hostname}-{now}'    \
    "${backup_paths[*]}"

backup_exit=$?

echo "Pruning repository"

# Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
# archives of THIS machine. The '{hostname}-' prefix is very important to
# limit prune's operation to this machine's archives and not apply to
# other machines' archives also:

borg prune                 \
    --list                 \
    --prefix '{hostname}-' \
    --show-rc              \
    --keep-daily    2      \
    --keep-weekly   2      \
    --keep-monthly  6

prune_exit=$?

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

if [ ${global_exit} -eq 0 ]; then
    echo "Backup and Prune finished successfully"
elif [ ${global_exit} -eq 1 ]; then
    echo "Backup and/or Prune finished with warnings"
else
    echo "Backup and/or Prune finished with errors"
fi

unset BORG_PASSPHRASE BORG_REPO
exit ${global_exit}
