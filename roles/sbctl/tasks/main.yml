---

- name: Install sbctl
  community.general.pacman:
    name: sbctl
    state: present
  when: not chroot_path
  tags: ["install"]

- name: Create keys
  ansible.builtin.command: >-
    {% if chroot_path %}
    arch-chroot {{ chroot_path }}
    {% endif %}
    sbctl create-keys
  args:
    creates: "{{ chroot_path }}/var/lib/sbctl/GUID"

- name: Fail if bundling is enabled but kernel params are missing
  ansible.builtin.fail:
    msg: "kernel_params is empty"
  when:
    - sbctl_bundles | length > 0
    - not kernel_params

- name: Write kernel parameters to file
  ansible.builtin.copy:
    dest: "{{ sbctl_cmdline }}"
    owner: root
    group: root
    mode: "0644"
    content: "{{ kernel_params }}"
  when: sbctl_bundles | length > 0

- name: Enroll keys
  ansible.builtin.command: >-
    {% if chroot_path %}
    arch-chroot {{ chroot_path }}
    {% endif %}
    sbctl enroll-keys {% if sbctl_enroll_microsoft %}--microsoft{% endif %}
  args:
    # https://github.com/Foxboron/sbctl/blob/32ac2678342aab8233ee887ea73cc781e907f86a/util.go#L73
    # Don't need chroot here
    creates: "/sys/firmware/efi/efivars/db-d719b2cb-3d3a-4596-a3bc-dad00e67656f"
  notify: reboot
  when: sbctl_enroll | bool
  tags: ["enroll"]

- name: Ensure <ESP>/EFI/Linux exists
  ansible.builtin.file:
    path: "{{ chroot_path }}{{ esp_mount }}/EFI/Linux"
    state: directory
    owner: root
    group: root
    mode: "0755"
  when: sbctl_bundles | length > 0

- name: Prepare required facts
  ansible.builtin.set_fact:
    __bundles: "{{ __bundles | default([]) + [tmp_dict] }}"
    __sbctl_efibootmgr: "{{ __sbctl_efibootmgr | default([]) + [tmp_dict_efi] }}"
  vars:
    tmp_dict:
      label: "{{ item.label | default(ansible_distribution + ' ' + item.kernel) }}"
      kernel_path: "{{ item.kernel_path | default('vmlinuz-' + item.kernel) }}"
      initrd: "{{ item.initrd | default('initramfs-' + item.kernel + '.img') }}"
      bundle: "{{ item.bundle | default(item.kernel + '.efi') }}"
    tmp_dict_efi:
      disk: "{{ esp_disk }}"
      part: "{{ esp_part }}"
      loader: "/EFI/Linux/{{ tmp_dict.bundle }}"
      label: "{{ tmp_dict.label }}"
  loop: "{{ sbctl_bundles }}"
  loop_control:
    label: "{{ item.kernel }}"

- name: Bundle kernels
  ansible.builtin.command: >-
    {% if chroot_path %}
    arch-chroot {{ chroot_path }}
    {% endif %}
    sbctl bundle -s
    -i {{ boot_mount }}/{{ sbctl_ucode }}
    -c {{ sbctl_cmdline }}
    -l {{ efistub_splash }}
    -k {{ boot_mount }}/{{ item.kernel_path }}
    -f {{ boot_mount }}/{{ item.initrd }}
    {{ esp_mount }}/EFI/Linux/{{ item.bundle }}
  args:
    creates: "{{ chroot_path }}{{ esp_mount }}/EFI/Linux/{{ item.bundle }}"
  loop: "{{ __bundles }}"
  when: __bundles is defined

- name: Sign files
  ansible.builtin.command: >-
    {% if chroot_path %}
    arch-chroot {{ chroot_path }}
    {% endif %}
    sbctl sign -s {{ item }}
  register: __sbctl_sign
  changed_when: "'already been signed' not in __sbctl_sign.stdout"
  loop: "{{ sbctl_sign_files }}"

- name: Sign all
  ansible.builtin.command: >-
    {% if chroot_path %}
    arch-chroot {{ chroot_path }}
    {% endif %}
    sbctl sign-all -g
  changed_when: false

- name: Add entries in EFI
  ansible.builtin.include_role:
    name: "efibootmgr"
  vars:
    efibootmgr_entries: "{{ __sbctl_efibootmgr }}"
  when:
    - sbctl_uefi_add
    - __sbctl_efibootmgr is defined
