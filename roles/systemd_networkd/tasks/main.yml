---

- name: Install EPEL
  ansible.builtin.include_role:
    name: epel
    apply:
      tags: ["install"]
  when:
    - networkd_install | bool
    - ansible_distribution != 'Fedora'
    - ansible_os_family == 'RedHat'
  tags: ["install"]

- name: Load OS-specific vars
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - files: ["{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"]
      skip: true
  when:
    - networkd_install | bool
  tags: ["install"]

- name: Install networkd packages
  ansible.builtin.package:
    name: "{{ networkd_packages }}"
    state: present
  when:
    - networkd_install | bool
    # They are part of the systemd package on Arch
    - ansible_distribution != "Archlinux"
  tags: ["install"]

- name: Register previously copied configuration files
  ansible.builtin.find:
    paths: "{{ chroot_path }}/etc/systemd/network"
    patterns:
      - "*.network"
      - "*.netdev"
      - "*.link"
  register: __networkd_present
  when: networkd_provisioning_synced

- name: Copy networkd configs
  ansible.builtin.copy:
    dest: "{{ chroot_path }}/etc/systemd/network/{{ item.key }}.network"
    owner: root
    group: root
    mode: "0644"
    content: |
      {{ ansible_managed | comment }}
      {{ item.value }}
  loop: "{{ networkd_config | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  register: __network_copied
  notify: Restart systemd-networkd

- name: Copy networkd netdevs
  ansible.builtin.copy:
    dest: "{{ chroot_path }}/etc/systemd/network/{{ item.key }}.netdev"
    owner: root
    group: root
    mode: "0644"
    content: |
      {{ ansible_managed | comment }}
      {{ item.value }}
  loop: "{{ networkd_netdevs | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  register: __netdev_copied
  notify: Restart systemd-networkd

- name: Copy networkd links
  ansible.builtin.copy:
    dest: "{{ chroot_path }}/etc/systemd/network/{{ item.key }}.link"
    owner: root
    group: root
    mode: "0644"
    content: |
      {{ ansible_managed | comment }}
      {{ item.value }}
  loop: "{{ networkd_links | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  register: __link_copied
  notify: Restart systemd-networkd

- name: Set list facts
  ansible.builtin.set_fact:
    __networkd_present_list: "{{ __networkd_present | json_query('files[*].path') | default([]) }}"
    __networkd_copied_list: "{{
      __network_copied_tmp + __network_copied_tmp_check +
      __netdev_copied_tmp + __netdev_copied_tmp_check +
      __link_copied_tmp + __link_copied_tmp_check
      }}"
  vars:
    __network_copied_tmp: "{{ __network_copied.results | json_query('[*].dest') | default([]) }}"
    __network_copied_tmp_check: "{{ __network_copied.results | json_query('[*].invocation.dest') | default([]) }}"
    __netdev_copied_tmp: "{{ __netdev_copied.results | json_query('[*].dest') | default([]) }}"
    __netdev_copied_tmp_check: "{{ __netdev_copied.results | json_query('[*].invocation.dest') | default([]) }}"
    __link_copied_tmp: "{{ __link_copied.results | json_query('[*].dest') | default([]) }}"
    __link_copied_tmp_check: "{{ __link_copied.results | json_query('[*].invocation.dest') | default([]) }}"
  when: networkd_provisioning_synced

- name: Remove configs not present on deployer machine (synchronize)
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ __networkd_present_list | difference(__networkd_copied_list) }}"
  notify: Restart systemd-networkd
  when: networkd_provisioning_synced


- name: Include resolved configuration
  ansible.builtin.include_tasks:
    file: resolved.yml

- name: Check if NetworkManager is active  # noqa command-instead-of-module
  ansible.builtin.command: systemctl is-active -q NetworkManager.service
  check_mode: false
  changed_when: false
  failed_when: false
  when: not chroot_path
  register: __nm_active

- name: Disable NM
  when:
    - __nm_active is defined
    - __nm_active.rc is defined
    - __nm_active.rc == 0
  block:
    - name: Stop NetworkManager
      ansible.builtin.systemd:
        name: NetworkManager
        state: stopped
      when: networkd_immediate | bool

    - name: Disable NetworkManager
      ansible.builtin.systemd:
        name: NetworkManager
        enabled: false

- name: "Ensure systemd-networkd services are enabled {{ 'and started' if networkd_immediate | bool else '' }}"
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: true
    state: "{{ 'started' if networkd_immediate | bool else omit }}"
  loop: "{{ networkd_services }}"
  when: not chroot_path

- name: Enable systemd-networkd services (chroot)
  ansible.builtin.command: >-
    arch-chroot {{ chroot_path }} systemctl enable {{ item }}
  loop: "{{ networkd_services }}"
  when: chroot_path
