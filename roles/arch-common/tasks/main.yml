---

- name: "Set timezone"
  become: true
  ansible.builtin.file:
    # src should remain relative to chroot_path, it does not need the prefix.
    src: "/usr/share/zoneinfo/{{ sys_timezone }}"
    dest: "{{ chroot_path }}/etc/localtime"
    owner: root
    group: root
    state: link
  tags: ["time"]

- name: "Sync hwclock"
  become: true
  ansible.builtin.command: "hwclock --systohc"
  args:
    creates: "{{ chroot_path }}/etc/adjtime"
  when: hwclock_sync | bool
  tags: ["time"]

- name: Configure pacman
  become: true
  ansible.builtin.lineinfile:
    path: "{{ chroot_path }}/etc/pacman.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop: "{{ pacman_config }}"
  loop_control:
    label: "{{ item.line }}"
  tags: ["pacman"]

- name: Configure makepkg
  become: true
  ansible.builtin.replace:
    path: "{{ chroot_path }}/etc/makepkg.conf"
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
  loop: "{{ makepkg_config }}"
  loop_control:
    label: "{{ item.replace }}"
  tags: ["makepkg"]

- name: Write crypttab
  ansible.builtin.copy:
    dest: "{{ chroot_path }}/etc/crypttab"
    owner: root
    group: root
    mode: "0600"
    content: "{{ crypttab }}\n"
  when: crypttab | default('')
  tags: ["crypttab"]

- name: Write crypttab.initramfs
  ansible.builtin.copy:
    dest: "{{ chroot_path }}/etc/crypttab.initramfs"
    owner: root
    group: root
    mode: "0600"
    content: "{{ crypttab_initramfs }}\n"
  when: crypttab_initramfs | default('')
  tags: ["crypttab"]

- name: Write modprobe configs
  ansible.builtin.copy:
    content: "{{ item.value }}\n"
    dest: "{{ chroot_path }}/etc/modprobe.d/{{ item.key }}"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ modprobe_config | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  tags: ["modprobe"]

- name: Mask services
  ansible.builtin.systemd:
    name: "{{ item }}"
    masked: true
  loop: "{{ masked_services }}"
  when: not chroot_path
  tags: ["mask"]

- name: Mask services (chroot)
  ansible.builtin.command: >-
    arch-chroot {{ chroot_path }} systemctl mask {{ item }}
  loop: "{{ masked_services }}"
  when: chroot_path
  tags: ["mask"]

- name: Enable and start systemd-timesyncd
  ansible.builtin.systemd:
    name: systemd-timesyncd.service
    state: started
    enabled: true
  when: not chroot_path
  tags: ["timesyncd"]
