#!/usr/bin/env -S ansible-playbook
---

- name: Destroy KVM VMs
  hosts: libvirt
  gather_facts: false
  vars:
    delete_storage: false
  pre_tasks:
    - name: Warn if no limit was passed
      run_once: true
      ansible.builtin.pause:
        prompt: "WARNING: No limit in use"
      when: not ansible_limit | default(false)

  tasks:
    - name: Destroy VM
      delegate_to: "{{ vm_host }}"
      community.libvirt.virt:
        name: "{{ inventory_hostname }}"
        state: destroyed
      failed_when: __destroy.failed and 'virtual machine ' + inventory_hostname + ' not found' not in __destroy.msg
      register: __destroy

    - name: Undefine VM
      delegate_to: "{{ vm_host }}"
      ansible.builtin.command:
        cmd: >-
          /usr/bin/virsh undefine
          --nvram
          {% if delete_storage | bool %}--remove-all-storage{% endif %}
          {{ inventory_hostname }}
      changed_when: "'has been undefined' in __virsh.stdout"
      register: __virsh
      when: "'virtual machine ' + inventory_hostname + ' not found' not in __destroy.msg | default('') | string"

    - name: Remove ignition file
      delegate_to: "{{ vm_host }}"
      ansible.builtin.file:
        path: "{{ vm_ignition_path }}/{{ inventory_hostname }}.ign"
        state: absent
      when: vm_ignition_path | default('')

    - name: Remove QEMU log file
      delegate_to: "{{ vm_host }}"
      ansible.builtin.file:
        path: "/var/log/libvirt/qemu/{{ inventory_hostname }}.log"
        state: absent

    - name: Delete RBD volumes
      tags: ["rbd"]
      when:
        - delete_storage | bool
        - vm_rbd_root_enabled or vm_rbd_data_disks | length > 0
      delegate_to: "{{ vm_host }}"
      block:
        - name: Get images in RBD pool
          check_mode: false
          changed_when: false
          ansible.builtin.command:
            cmd: "rbd -p {{ vm_rbd_pool }} ls --format json"
          register: __rbd_ls

        - name: Set fact for present images in RBD pool
          ansible.builtin.set_fact:
            rbd_ls: "{{ __rbd_ls.stdout | from_json }}"

        - name: Delete RBD images  # noqa no-changed-when
          ansible.builtin.command:
            cmd: "rbd -p {{ vm_rbd_pool }} rm {{ item }}"
          loop: "{{ rbd_ls | select('match', '^' + inventory_hostname + '-(root|data)\\d+') }}"
