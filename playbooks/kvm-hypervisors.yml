#!/usr/bin/env -S ansible-playbook
---

- name: Configure KVM hypervisors
  hosts: kvm_hv
  pre_tasks:
    - name: Install packages
      ansible.builtin.dnf:
        name: "{{ dnf_packages }}"
        state: present
      tags: ["dnf"]
  roles:
    - role: grub
      tags: ["grub"]

    - role: systemd_cryptenroll
      tags: ["cryptenroll"]

    - role: auto_ssh
      tags: ["auto-ssh"]

    - role: btrbk
      tags: ["btrbk"]

    - role: cpupower
      tags: ["cpupower"]

    - role: libvirt
      tags: ["libvirt"]

    - role: cockpit
      tags: ["cockpit"]

    - role: postfix
      tags: ["postfix"]

    - role: smartd
      tags: ["smartd"]

    - role: fzf
      tags: ["fzf"]

    - role: chezmoi
      tags: ["chezmoi"]
  tasks:
    - name: Include common tasks
      ansible.builtin.include_tasks:
        file: ../tasks/common_servers.yml
      tags: ["always"]

    - name: Check if RTC is using local time
      ansible.builtin.command:
        cmd: timedatectl show -p LocalRTC
      check_mode: false
      changed_when: false
      register: __rtc_local
      tags: ["rtc"]

    - name: Ensure system clock is using UTC  # noqa no-changed-when
      ansible.builtin.command:
        cmd: timedatectl set-local-rtc 0
      when: __rtc_local.stdout.strip() == 'LocalRTC=yes'
      tags: ["rtc"]

    - name: Btrfs tasks
      tags: ["btrfs"]
      when:
        - btrfs_src | default('')
        - btrfs_root | default('')
      block:
        - name: Mount btrfs root
          ansible.posix.mount:
            src: "{{ btrfs_src }}"
            path: "{{ btrfs_root }}"
            fstype: btrfs
            opts: "subvolid=5,{{ btrfs_opts }}"
            state: mounted
          tags: ["subvols"]

        - name: Create subvolumes
          community.general.btrfs_subvolume:
            name: "{{ item }}"
            filesystem_label: "{{ btrfs_src | regex_replace('^LABEL=', '') }}"
            state: present
          loop: "{{ btrfs_subvols | default([]) }}"
          tags: ["subvols"]

        - name: Create root snapshots dir
          ansible.builtin.file:
            path: "/.snapshots"
            state: directory
            owner: root
            group: root
            mode: "0755"
          tags: ["snapshots"]

        - name: Mount snapshots subvolume
          ansible.posix.mount:
            src: "{{ btrfs_src }}"
            path: /.snapshots
            fstype: btrfs
            opts: "subvol=@snapshots,{{ btrfs_opts }}"
            state: mounted
          tags: ["snapshots"]

        - name: Create swap dir
          ansible.builtin.file:
            path: "{{ swapfile_path | dirname }}"
            state: directory
            owner: root
            group: root
            mode: "0700"
          when: swapfile_path | default('')
          tags: ["swap"]

        - name: Mount swap subvolume
          ansible.posix.mount:
            src: "{{ btrfs_src }}"
            path: "{{ swapfile_path | dirname }}"
            fstype: btrfs
            opts: "subvol=@swap,{{ btrfs_opts }}"
            state: mounted
          when: swapfile_path | default('')
          tags: ["swap"]

        - name: Set no COW attribute
          ansible.builtin.file:
            path: "{{ item }}"
            attributes: +C
          loop: "{{ btrfs_nocow_paths | default([]) }}"
          tags: ["swap"]

    - name: Create my user
      ansible.builtin.user:
        name: "{{ my_user }}"
        password: "{{ my_user_pass }}"
        shell: "/usr/bin/zsh"
        home: "/home/{{ my_user }}"
        create_home: false
        groups: wheel
        append: true
        uid: 1000
      tags: ["user"]

    - name: Ensure user home permissions are correct
      ansible.builtin.file:
        path: "/home/{{ my_user }}"
        state: directory
        owner: "{{ my_user }}"
        group: "{{ my_user }}"
        mode: "0700"
      # Should only change after we created the subvolume
      notify: Restore user SELinux context
      tags: ["user"]

    - name: Configure user SSH keys
      ansible.posix.authorized_key:
        user: "{{ my_user }}"
        key: "{{ ssh_authorized_keys | join('\n') }}"
        state: present
        exclusive: true
      tags: ["user", "ssh"]

  post_tasks:
    - name: Symlink cockpit certs
      ansible.builtin.file:
        src: "/etc/pki/tls/{{ 'certs' if item == 'crt' else 'private' }}/{{ domain }}.{{ item }}"
        dest: "/etc/cockpit/ws-certs.d/99-live.{{ item }}"
        follow: false
        state: link
        force: true
      loop: ["crt", "key"]
      tags: ["cockpit"]

  handlers:
    - name: Restore user SELinux context
      ansible.builtin.command: "restorecon -r /home/{{ my_user }}"

- name: Import Theia playbook
  ansible.builtin.import_playbook: theia.yml
