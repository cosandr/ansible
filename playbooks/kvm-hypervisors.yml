#!/usr/bin/env -S ansible-playbook
---

- name: Configure KVM hypervisors
  hosts: kvm_hv
  pre_tasks:
    - name: Copy pgdg GPG key
      ansible.builtin.get_url:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        dest: /etc/apt/keyrings/apt.postgresql.org.asc
        owner: root
        group: root
        mode: "0644"
      diff: false
      tags: ["apt", "postgres"]

    - name: Add pgdg repo
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release | lower }}-pgdg main" # noqa yaml[line-length]
        state: present
        filename: pgdg
      tags: ["apt", "postgres"]
  roles:
    - role: grub
      tags: ["grub"]

    - role: systemd_cryptenroll
      tags: ["cryptenroll"]

    - role: auto_ssh
      tags: ["auto-ssh"]

    - role: btrbk
      when: btrbk_volumes | default([])
      tags: ["btrbk"]

    - role: cpupower
      tags: ["cpupower"]

    - role: intel_gvt
      tags: ["gvt"]

    - role: libvirt
      tags: ["libvirt"]

    - role: cockpit
      tags: ["cockpit"]

    - role: smartd
      tags: ["smartd"]

    - role: fzf
      tags: ["fzf"]

    - role: chezmoi
      tags: ["chezmoi"]

    - role: cadvisor
      tags: ["cadvisor"]
  tasks:
    - name: Include common tasks
      ansible.builtin.include_tasks:
        file: ../tasks/common_servers.yml
      tags: ["always"]

    - name: Check if RTC is using local time
      ansible.builtin.command:
        cmd: timedatectl show -p LocalRTC
      check_mode: false
      changed_when: false
      register: __rtc_local
      tags: ["rtc"]

    - name: Ensure system clock is using UTC  # noqa no-changed-when
      ansible.builtin.command:
        cmd: timedatectl set-local-rtc 0
      when: __rtc_local.stdout.strip() == 'LocalRTC=yes'
      tags: ["rtc"]

    - name: Btrfs tasks
      tags: ["btrfs"]
      when:
        - btrfs_src | default('')
        - btrfs_root | default('')
      block:
        - name: Mount btrfs root
          ansible.posix.mount:
            src: "{{ btrfs_src }}"
            path: "{{ btrfs_root }}"
            fstype: btrfs
            opts: "subvolid=5,{{ btrfs_opts }}"
            state: mounted
          tags: ["subvols"]

        - name: Create subvolumes
          community.general.btrfs_subvolume:
            name: "{{ item }}"
            filesystem_label: "{{ btrfs_src | regex_replace('^LABEL=', '') }}"
            state: present
          loop: "{{ btrfs_subvols | default([]) }}"
          tags: ["subvols"]

        # Use if community module crashes
        # https://github.com/ansible-collections/community.general/issues/7098
        # - name: Create subvolumes
        #   ansible.builtin.command: "btrfs subvolume create {{ btrfs_root }}/{{ item }}"
        #   register: btrfs_subvolume_create
        #   changed_when: "btrfs_subvolume_create.rc == 0"
        #   failed_when: "btrfs_subvolume_create.rc != 0 and 'target path already exists' not in btrfs_subvolume_create.stderr"
        #   loop: "{{ btrfs_subvols | default([]) }}"
        #   tags: ["subvols"]

        - name: Create root snapshots dir
          ansible.builtin.file:
            path: "/.snapshots"
            state: directory
            owner: root
            group: root
            mode: "0755"
          tags: ["snapshots"]

        - name: Mount snapshots subvolume
          ansible.posix.mount:
            src: "{{ btrfs_src }}"
            path: /.snapshots
            fstype: btrfs
            opts: "subvol=@snapshots,{{ btrfs_opts }}"
            state: mounted
          tags: ["snapshots"]

        - name: Create swap dir
          ansible.builtin.file:
            path: "{{ swapfile_path | dirname }}"
            state: directory
            owner: root
            group: root
            mode: "0700"
          when: swapfile_path | default('')
          tags: ["swap"]

        - name: Mount swap subvolume
          ansible.posix.mount:
            src: "{{ btrfs_src }}"
            path: "{{ swapfile_path | dirname }}"
            fstype: btrfs
            opts: "subvol=@swap,{{ btrfs_opts }}"
            state: mounted
          when: swapfile_path | default('')
          tags: ["swap"]

        - name: Set no COW attribute
          ansible.builtin.file:
            path: "{{ item }}"
            attributes: +C
          loop: "{{ btrfs_nocow_paths | default([]) }}"
          tags: ["swap"]

    - name: Define libvirt default pool
      community.libvirt.virt_pool:
        name: default
        command: define
        xml: "{{ lookup('file', repo_base_dir + '/files/kvm_hv/libvirt-default.xml') }}"
        state: "present"
      tags: ["libvirt", "pool"]

    - name: Start libvirt default pool
      community.libvirt.virt_pool:
        name: default
        state: active
      tags: ["libvirt", "pool"]

    - name: Ensure libvirt default pool is autostarted
      community.libvirt.virt_pool:
        name: default
        autostart: true
      tags: ["libvirt", "pool"]

    - name: Create wheel group
      ansible.builtin.group:
        name: wheel
        state: present
        system: true
      when: ansible_os_family == 'Debian'
      tags: ["user"]

    - name: Create my user
      ansible.builtin.user:
        name: "{{ my_user }}"
        password: "{{ my_user_pass }}"
        shell: "/usr/bin/zsh"
        home: "/home/{{ my_user }}"
        create_home: false
        groups:
          - wheel
          - video
          - render
        append: true
        uid: 1000
      tags: ["user"]

    - name: Add my user to adm group
      ansible.builtin.user:
        name: "{{ my_user }}"
        groups:
          - adm
        append: true
      when: ansible_os_family == 'Debian'
      tags: ["user"]

    - name: Ensure user home permissions are correct
      ansible.builtin.file:
        path: "/home/{{ my_user }}"
        state: directory
        owner: "{{ my_user }}"
        group: "{{ my_user }}"
        mode: "0700"
      tags: ["user"]

    - name: Configure user SSH keys
      ansible.posix.authorized_key:
        user: "{{ my_user }}"
        key: "{{ ssh_authorized_keys | join('\n') }}"
        state: present
        exclusive: true
      tags: ["user", "ssh"]

- name: Import Theia playbook
  ansible.builtin.import_playbook: theia.yml
