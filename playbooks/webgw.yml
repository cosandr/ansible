#!/usr/bin/env -S ansible-playbook
---

- name: Configure SSH
  hosts: webgw
  gather_facts: false
  pre_tasks:
    - name: Check if we can connect on configured port
      ansible.builtin.wait_for:
        port: "{{ ansible_port }}"
        state: "started"
        host: "{{ ansible_host }}"
        connect_timeout: 2
        timeout: 4
      delegate_to: "localhost"
      ignore_errors: true
      check_mode: false
      register: __configured_ssh
      tags: ["sshd"]

  roles:
    - role: change_ssh_port
      when:
        - ansible_port != 22
        - __configured_ssh is defined
        - __configured_ssh.state is undefined
      tags: ["sshd"]

- name: Configure user
  hosts: webgw
  gather_facts: false
  pre_tasks:
    - name: Try to connect as configured user
      delegate_to: localhost
      ansible.builtin.command: >
        ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o BatchMode=yes -o ConnectTimeout=1
          -p {{ ansible_port | default(22) }} {{ ansible_user }}@{{ ansible_host }} /bin/true
      check_mode: false
      changed_when: false
      failed_when: false
      register: __user_connect
      tags: ["user"]
      when: ansible_user != 'root'

  tasks:
    - name: Configure user
      tags: ["user"]
      when:
        - __user_connect is defined
        - __user_connect.rc | default(0) != 0
      block:
        - name: Temporarily connect as root
          ansible.builtin.set_fact:
            ansible_conf_user: "{{ ansible_user }}"
            ansible_user: "root"

        - name: Ensure user exists
          ansible.builtin.user:
            name: "{{ ansible_conf_user }}"
            create_home: true
            groups:
              - wheel

        - name: Configure user SSH keys
          ansible.posix.authorized_key:
            user: "{{ ansible_conf_user }}"
            key: "{{ ssh_authorized_keys | join('\n') }}"
            state: present
            exclusive: true
          tags: ["ssh"]

        - name: Configure sudo
          ansible.builtin.include_role:
            name: sudo
          vars:
            sudo_install: false
            sudoers_files:
              - dest: "10-{{ ansible_conf_user }}"
                content: "{{ ansible_conf_user }} ALL=(ALL) NOPASSWD: ALL"

        - name: Connect as configured user
          ansible.builtin.set_fact:
            ansible_user: "{{ ansible_conf_user }}"

        - name: Ensure we can connect and become
          become: true
          check_mode: false
          changed_when: false
          ansible.builtin.shell: /usr/bin/test $EUID -eq 0

- name: Configure gateways
  hosts: webgw
  gather_facts: true
  pre_tasks:
    - name: Enable SELinux
      ansible.posix.selinux:
        policy: targeted
        state: enforcing
      register: __selinux_state
      when: ansible_os_family == 'RedHat'
      tags: ["selinux"]

    - name: Reboot if required
      ansible.builtin.reboot:
      when:
        - __selinux_state is defined
        - __selinux_state.reboot_required
      tags: ["selinux"]

    - name: Install epel
      ansible.builtin.include_role:
        name: epel
      tags: ["install"]
      when: ansible_os_family == 'RedHat'

    - name: Set fail2ban facts
      ansible.builtin.set_fact:
        fail2ban_ignoreip: "{{ (__f2b_extra_ignore + hostvars['laptop'].wireguard_mt_allowed_ips) | flatten }}"
      tags: ["fail2ban"]

    - name: Include common tasks
      ansible.builtin.include_tasks:
        file: ../tasks/common_servers.yml
      tags: ["always"]
  roles:
    - role: fail2ban
      tags: ["fail2ban"]

    - role: auto_ssh
      when: ssh_dest_hosts | default([])
      tags: ["auto-ssh"]

    - role: certbot
      vars:
        certbot_domains: "{{ certbot_domains_hetzner }}"
        certbot_credentials_path: "{{ certbot_credentials_path_hetzner }}"
        certbot_credentials_content: "{{ certbot_credentials_content_hetzner }}"
        certbot_generate_command: "{{ certbot_generate_command_hetzner }}"
      when:
        - certbot_domains_hetzner is defined
        - certbot_domains_hetzner | length > 0
      tags: ["certbot", "hetzner"]

    - role: certbot
      vars:
        certbot_install: "{{ __certbot_installed is not defined }}"
        certbot_domains: "{{ certbot_domains_cloudflare }}"
        certbot_credentials_path: "{{ certbot_credentials_path_cloudflare }}"
        certbot_credentials_content: "{{ certbot_credentials_content_cloudflare }}"
        certbot_generate_command: "{{ certbot_generate_command_cloudflare }}"
      when:
        - certbot_domains_cloudflare is defined
        - certbot_domains_cloudflare | length > 0
      tags: ["certbot", "cloudflare"]

    - role: nginx_pre
      tags: ["nginx"]

    - role: nginx
      tags: ["nginx"]

    - role: nginx_exporter
      tags: ["nginx_exporter"]

    - role: wireguard
      when: wireguard_address is defined
      tags: ["wireguard"]
