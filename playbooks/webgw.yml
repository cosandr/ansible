---

-
  hosts: webgw
  gather_facts: true
  pre_tasks:
    - name: Enable SELinux
      selinux:
        policy: targeted
        state: enforcing
      register: __selinux_state
      when: ansible_os_family == 'RedHat'
      tags: ["selinux"]

    - name: Reboot if required
      reboot:
      when:
        - __selinux_state is defined
        - __selinux_state.reboot_required
      tags: ["selinux"]

    - name: Install epel
      dnf:
        name: epel-release
        state: present
      tags: ["install"]
      when: ansible_os_family == 'RedHat'

    - name: Ensure nginx directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: 0755
      loop:
        - "{{ nginx_dhparam | dirname }}"
        - "{{ nginx_sites_logs }}"
      tags: ["nginx"]

    - name: Download dhparam
      get_url:
        url: https://ssl-config.mozilla.org/ffdhe2048.txt
        dest: "{{ nginx_dhparam }}"
        mode: 0644
        owner: root
        group: root
      tags: ["nginx"]

    - name: Install nginx repo
      copy:
        dest: /etc/yum.repos.d/nginx.repo
        content: |
          [nginx-stable]
          name=nginx stable repo
          baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
          gpgcheck=1
          enabled=1
          gpgkey=https://nginx.org/keys/nginx_signing.key
          module_hotfixes=true

          [nginx-mainline]
          name=nginx mainline repo
          baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/
          gpgcheck=1
          enabled=0
          gpgkey=https://nginx.org/keys/nginx_signing.key
          module_hotfixes=true
        owner: root
        group: root
        mode: 0644
      tags: ["nginx"]

    - name: Allow nginx proxy
      seboolean:
        name: httpd_can_network_connect
        state: yes
        persistent: yes
      when:
        - ansible_os_family == 'RedHat'
        - ansible_selinux.status == "enabled"
      tags: ["nginx"]
  roles:
    - role: sshd
      tags: ["sshd"]

    - role: ufw
      when: ansible_os_family == 'Debian'
      tags: ["ufw"]

    - role: fail2ban
      tags: ["fail2ban"]

    - role: unattended-upgrades
      when: ansible_os_family == 'Debian'
      tags: ["unattended-upgrades"]

    - role: cosandr.dnf_automatic
      when: ansible_os_family == 'RedHat'
      tags: ["dnf_automatic"]

    - role: node_exporter
      tags: ["node_exporter"]

    - role: filebeat
      # "filebeat_config is defined" for some reason doesn't work
      when: "'filebeat_config' in hostvars[inventory_hostname]"
      tags: ["filebeat"]

    - role: certbot
      tags: ["certbot"]

    - role: certbot
      vars:
        certbot_domains:
          - "{{ domains[4] }},*.{{ domains[4] }}"
        certbot_credentials_path: "/etc/letsencrypt/cloudflare.ini"
        certbot_credentials_content: |
          dns_cloudflare_api_token = {{ vault_dns_cloudflare_api_token }}

        certbot_generate_command: >
          certbot certonly
          --authenticator dns-cloudflare
          --dns-cloudflare-credentials {{ certbot_credentials_path }}
          -n
          --keep
          --expand
      tags: ["certbot-cloudflare"]

    - role: nginx
      tags: ["nginx"]

    - role: nginx_exporter
      tags: ["nginx_exporter"]

    - role: wireguard
      when: wireguard_address is defined
      tags: ["wireguard"]
  tasks:
    - block:
        - name: Install firewalld
          dnf:
            name: firewalld
            state: present
          tags: ["install"]

        - name: Remove cockpit from public zone
          firewalld:
            zone: "public"
            service: "cockpit"
            permanent: true
            state: disabled
          notify: reload firewalld

        - name: Add http and https to public zone
          firewalld:
            zone: "public"
            service: "{{ item }}"
            permanent: true
            state: enabled
          loop:
            - "http"
            - "https"
          notify: reload firewalld

        - name: Enable masquerade on configured zones
          firewalld:
            zone: "{{ item }}"
            masquerade: true
            permanent: true
            state: enabled
          loop: "{{ firewalld_masquerade_zones }}"
          notify: reload firewalld

        - name: Add port forwards to public zone
          firewalld:
            zone: "public"
            port_forward: "{{ firewalld_port_forwards }}"
            permanent: true
            state: enabled
          notify: reload firewalld

        - name: Add mt interface to internal zone
          firewalld:
            zone: "internal"
            interface: "mt"
            permanent: true
            state: enabled
          when: wireguard_address is defined
          notify: reload firewalld

        - name: Add prom server to internal zone
          firewalld:
            zone: "internal"
            source: "{{ hostvars['prom01'].ansible_host }}"
            permanent: true
            state: enabled
          when: wireguard_address is not defined
          notify: reload firewalld

        - name: Add ports to internal zone
          firewalld:
            zone: internal
            port: "{{ item }}/tcp"
            permanent: true
            state: enabled
          loop:
            - "{{ node_exporter_port }}"
            - "{{ nginx_exporter_port }}"
          notify: reload firewalld

      tags: ["firewalld"]
      when: ansible_os_family == 'RedHat'

  handlers:
    - name: reload firewalld
      service:
        name: firewalld
        state: reloaded
