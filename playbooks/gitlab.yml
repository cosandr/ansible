#!/usr/bin/env -S ansible-playbook
---

- name: Setup Gitlab
  hosts: gitlab
  gather_facts: true
  pre_tasks:
    - name: Include common tasks
      ansible.builtin.include_tasks:
        file: ../tasks/common_servers.yml
      tags: ["always"]
  roles:
    - role: geerlingguy.gitlab
      tags: ["gitlab"]

    - role: systemd
      tags: ["systemd"]

  post_tasks:
    # Required for gitlab backup to work
    - name: Ensure tar is installed
      ansible.builtin.dnf:
        name: tar
        state: present

    - name: Mount backup NFS share
      ansible.posix.mount:
        src: "{{ hostvars['theia'].host_ips.vm }}:/mnt/tank/backup/gitlab"
        path: "{{ gitlab_backup_upload_connection.local_root }}"
        opts: "defaults,vers=4,rw,noatime,bg"
        state: mounted
        fstype: nfs
      tags: ["gitlab", "nfs"]

    - name: Ensure git owns backup mount
      ansible.builtin.file:
        path: "{{ gitlab_backup_upload_connection.local_root }}"
        owner: git
        group: git
        mode: 0750
        state: directory
      tags: ["gitlab", "nfs"]

    - name: Ensure correct SELinux context for git .ssh
      community.general.sefcontext:
        target: "/var/opt/gitlab/.ssh(/.*)?"
        setype: ssh_home_t
        state: present
      notify: Restore git contexts
      when: ansible_selinux.status == "enabled"
      tags: ["gitlab", "selinux"]

    - name: Add garbage collection job
      ansible.builtin.template:
        src: "{{ repo_base_dir }}/files/gitlab/registry-garbage-collect.timer.j2"
        dest: "/etc/systemd/system/registry-garbage-collect.timer"
        owner: root
        group: root
        mode: 0644
      notify:
        - Reload systemd
        - Enable and start garbage collection
      tags: ["gitlab", "gc"]

    - name: Copy garbage collection service
      ansible.builtin.copy:
        src: "{{ repo_base_dir }}/files/gitlab/registry-garbage-collect.service"
        dest: "/etc/systemd/system/registry-garbage-collect.service"
        owner: root
        group: root
        mode: 0644
      notify: Reload systemd
      tags: ["gitlab", "gc"]

  handlers:
    - name: Restore git contexts
      ansible.builtin.command: restorecon -r /var/opt/gitlab/.ssh

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Enable and start garbage collection
      ansible.builtin.systemd:
        name: registry-garbage-collect.timer
        state: started
        enabled: true

- name: Setup Gitlab runners
  hosts: gitrun
  pre_tasks:
    - name: Include common tasks
      ansible.builtin.include_tasks:
        file: ../tasks/common_servers.yml
      tags: ["always"]

    - name: Setup podman runner
      tags: ["podman"]
      block:
        # Package sets it up, but it won't be installed when running from scratch
        - name: Ensure runner user exists
          ansible.builtin.user:
            name: gitlab-runner
            system: true
            state: present
          register: __runner_user
          tags: ["runner"]

        - name: Configure runner authorized_keys
          ansible.posix.authorized_key:
            user: "gitlab-runner"
            key: "{{ ssh_authorized_keys | join('\n') }}"
            state: present
            exclusive: true

        - name: Setup rootless podman
          ansible.builtin.copy:
            content: |
              gitlab-runner:100000:65536
            dest: "{{ item }}"
            owner: root
            group: root
            mode: "0644"
          loop:
            - "/etc/subuid"
            - "/etc/subgid"

        - name: Install packages
          ansible.builtin.dnf:
            name:
              - fuse-overlayfs
              - podman
              - python3-podman
              - podman-plugins
            state: present

        - name: Get user status
          ansible.builtin.command:
            cmd: loginctl show-user gitlab-runner
          changed_when: false
          check_mode: false
          failed_when: false
          register: __user_status

        - name: Enable linger
          ansible.builtin.command:
            cmd: loginctl enable-linger gitlab-runner
          when: "'Linger=yes' not in __user_status.stdout or 'not logged in or lingering' in __user_status.stderr"
          notify: Reboot

        - name: Enable and start user socket
          become: false
          vars:
            # become + become_user doesn't start a systemd session
            ansible_ssh_user: gitlab-runner
          ansible.builtin.systemd:
            name: podman.socket
            state: started
            enabled: true
            scope: user

        - name: Set socket path fact
          ansible.builtin.set_fact:
            podman_user_socket: "unix:///run/user/{{ __runner_user.uid }}/podman/podman.sock"
          tags: ["runner"]

  roles:
    - role: geerlingguy.docker
      tags: ["docker"]

    - role: gitlab_runner
      tags: ["runner"]

  handlers:
    - name: Reboot
      ansible.builtin.reboot:
