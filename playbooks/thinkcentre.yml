#!/usr/bin/env -S ansible-playbook
---

- name: Configure ThinkCentre machines
  hosts: thinkcentre
  pre_tasks:
    - name: Install packages
      ansible.builtin.dnf:
        name: "{{ dnf_packages }}"
        state: present
      tags: ["dnf"]
  roles:
    - role: grub
      tags: ["grub"]

    - role: systemd_cryptenroll
      tags: ["cryptenroll"]

    - role: systemd_networkd
      tags: ["networkd"]

    - role: auto_ssh
      tags: ["auto-ssh"]
  tasks:
    - name: Include common tasks
      ansible.builtin.include_tasks:
        file: ../tasks/common_servers.yml
      tags: ["always"]

    - name: Include hypervisor tasks
      ansible.builtin.include_tasks:
        file: ../tasks/kvm_hypervisors.yml
        apply:
          tags: ["hypervisor"]
      tags: ["always"]

    - name: Configure systemd-resolved
      ansible.builtin.lineinfile:
        dest: "/etc/systemd/resolved.conf"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      notify: Restart systemd-resolved
      loop:
        - regexp: "^#?DNS="
          line: "DNS={{ all_net.mgmt.cidr | ansible.utils.ipaddr('1') | ansible.utils.ipaddr('address') }}"
        - regexp: "^#?FallbackDNS"
          line: "FallbackDNS=1.1.1.1,8.8.8.8"
      tags: ["resolved"]

    - name: Btrfs tasks
      tags: ["btrfs"]
      block:
        - name: Mount btrfs root
          ansible.posix.mount:
            src: "{{ btrfs_src }}"
            path: "{{ btrfs_root }}"
            fstype: btrfs
            opts: "subvolid=5,{{ btrfs_opts }}"
            state: mounted
          tags: ["subvols"]

        - name: Get existing subvolumes
          ansible.builtin.shell: "set -o pipefail; btrfs sub list -t {{ btrfs_root }} | tail -n+3 | awk '{ print $4 }'"
          check_mode: false
          changed_when: false
          register: __subvols
          tags: ["subvols"]

        - name: Create missing subvolumes
          ansible.builtin.command: "btrfs sub create {{ btrfs_root }}/{{ item }}"
          loop: "{{ btrfs_subvols }}"
          when: item not in __subvols.stdout_lines
          tags: ["subvols"]

        - name: Create root snapshots dir
          ansible.builtin.file:
            path: "/.snapshots"
            state: directory
            owner: root
            group: root
            mode: 0755
          tags: ["snapshots"]

        - name: Mount snapshots subvolume
          ansible.posix.mount:
            src: "{{ btrfs_src }}"
            path: /.snapshots
            fstype: btrfs
            opts: "subvol=@snapshots,{{ btrfs_opts }}"
            state: mounted
          tags: ["snapshots"]

        - name: Create swap dir
          ansible.builtin.file:
            path: "/.swap"
            state: directory
            owner: root
            group: root
            mode: 0700
          tags: ["swap"]

        - name: Mount swap subvolume
          ansible.posix.mount:
            src: "{{ btrfs_src }}"
            path: /.swap
            fstype: btrfs
            opts: "subvol=@swap,{{ btrfs_opts }}"
            state: mounted
          tags: ["swap"]

        - name: Set no COW attribute
          ansible.builtin.file:
            path: /.swap
            attributes: +C
          tags: ["swap"]

    # Use include_role to ensure order is correct when run with -t swap or in full
    - name: Setup swap file
      ansible.builtin.include_role:
        name: swapfile
        apply:
          tags: ["swap"]
      tags: ["swap"]

    - name: Create libvirt NFS dir
      ansible.builtin.file:
        path: /var/lib/libvirt/theia
        state: directory
        owner: root
        group: root
        mode: 0755
      tags: ["libvirt", "nfs"]

    - name: Enable virt_use_nfs SELinux boolean
      ansible.posix.seboolean:
        name: virt_use_nfs
        state: true
        persistent: true
      when:
        - ansible_os_family == 'RedHat'
        - ansible_selinux.status == "enabled"
      tags: ["libvirt", "nfs", "selinux"]

    - name: Define libvirt NFS pool
      community.libvirt.virt_pool:
        name: theia
        command: define
        xml: "{{ lookup('template', inventory_dir + '/files/thinkcentre/libvirt/theia.xml.j2') }}"
        state: "active"
        autostart: true
      tags: ["libvirt", "nfs"]

  handlers:
    - name: Restart systemd-resolved
      ansible.builtin.systemd:
        name: systemd-resolved.service
        state: restarted
