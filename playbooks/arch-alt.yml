#!/usr/bin/env -S ansible-playbook
---

- name: Arch Install
  hosts: gui
  gather_facts: false
  become: true
  vars:
    ansible_os_family: Archlinux
    ansible_distribution: Archlinux
    env_name: "{{ mkinitcpio_uefi_prefix }}"
    src_host: "{{ lookup('pipe', 'hostname') | lower }}"
    chroot_path: "/mnt/{{ env_name }}"
    mounts:
      - path: /
        subvol: "{{ env_name }}/@"
      - path: /home
        subvol: "{{ env_name }}/@home"
      - path: /var/log
        subvol: "{{ env_name }}/@var_log"
      - path: /.snapshots
        subvol: "{{ env_name }}/@snapshots"
      - path: /.swap
        subvol: "{{ env_name }}/@swap"
    my_user_pass: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      62353464383663383335353432663531373334356565316561316266393134353539643836316438
      6233383661393830383936353434643163646266616464390a646130623539363266376635376137
      38396138303830333566363733356638396331346437323161353462643762353836386232333061
      6331363865653638640a383636323831653432653830396231363562656230336530636335336639
      39363364313766363564613364326330643239366135343139626239613063616439643038383664
      65353865383931666333643238653365353938356531313730393033663431363938306439613266
      61356437623130393538616636316662356333653866386234653830626565616365313664633338
      63626333366335643634373634386632653532633462383136343231333739383036333734313264
      38356561393566396665353761616536643866313165353033656238623030633938
  pre_tasks:
    - name: Get existing subvolumes
      ansible.builtin.shell: "set -o pipefail; btrfs sub list -t {{ btrfs_root }} | tail -n+3 | awk '{ print $4 }'"
      changed_when: false
      register: __subvols

    - name: Create missing subvolumes
      ansible.builtin.command: "btrfs sub create {{ btrfs_root }}/{{ item }}"
      loop: "{{ [env_name] + (mounts | map(attribute='subvol') | list) }}"
      when: item not in __subvols.stdout_lines

    - name: Prepare chroot mounts
      ansible.posix.mount:
        src: "{{ btrfs_src }}"
        path: "{{ chroot_path }}{{ item.path }}"
        opts: "{{ btrfs_opts }},subvol={{ item.subvol }}"
        state: mounted
        fstype: btrfs
        fstab: "/tmp/{{ env_name }}.fstab"
      loop: "{{ mounts }}"
      tags: ["mount"]

    - name: Ensure install scripts are present
      community.general.pacman:
        name: arch-install-scripts
        state: present

    - name: Copy pacman.conf
      ansible.builtin.copy:
        src: /etc/pacman.conf
        dest: /tmp/pacstrap.conf
        remote_src: true
        force: false
        owner: root
        group: root
        mode: 0644

    - name: Ensure no packages are ignored
      ansible.builtin.lineinfile:
        path: /tmp/pacstrap.conf
        regexp: '^IgnorePkg'
        state: absent

    - name: Install base packages
      ansible.builtin.command: "pacstrap -C /tmp/pacstrap.conf {{ chroot_path }}
        {{ pacman_packages | join(' ') }}"
      args:
        creates: "{{ chroot_path }}/etc/fstab"

    - name: Ensure fwupd signed file exists
      ansible.builtin.copy:
        src: "{{ chroot_path }}/usr/lib/fwupd/efi/fwupdx64.efi"
        dest: "{{ chroot_path }}/usr/lib/fwupd/efi/fwupdx64.efi.signed"
        owner: root
        group: root
        mode: "0644"
        remote_src: true
        force: false
      when: "'fwupd' in pacman_packages"
      tags: ["sbctl"]

    - name: Create some required directories
      ansible.builtin.file:
        path: "{{ item }}"
        owner: root
        group: root
        mode: 0755
        state: directory
      loop:
        - "{{ chroot_path }}/{{ btrfs_root }}"
        - "{{ chroot_path }}/{{ esp_mount }}"
        - "{{ chroot_path }}/usr/share/secureboot"
      tags: ["mount"]

    - name: Mount ESP
      ansible.posix.mount:
        src: "{{ esp_src }}"
        path: "{{ chroot_path }}/{{ esp_mount }}"
        state: mounted
        opts: 'defaults,noatime'
        fstype: vfat
        fstab: "/tmp/{{ env_name }}.fstab"
      tags: ["mount"]

    - name: Configure fstab # noqa no-tabs
      ansible.builtin.copy:
        dest: "{{ chroot_path }}/etc/fstab"
        owner: root
        group: root
        mode: 0644
        content: |
          # Static information about the filesystems.
          # See fstab(5) for details.

          # <file system> <dir> <type> <options> <dump> <pass>
          {{ esp_src }} 	 {{ esp_mount }} 	 vfat 	 rw,noatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro 	 0  2
          {{ btrfs_src }} 	 {{ btrfs_root }} 	 btrfs 	 {{ btrfs_opts }} 	0  0
          {% for m in mounts %}
          {{ btrfs_src }} 	 {{ m.path }} 	 btrfs 	 {{ btrfs_opts }},subvol={{ m.subvol }} 	0  0
          {% endfor %}

    - name: Check if sbctl is initialized on host
      ansible.builtin.stat:
        path: /usr/share/secureboot/GUID
      register: __sbctl_init
      tags: ["sbctl"]

    - name: Copy sbctl files
      ansible.builtin.copy:
        src: "/usr/share/secureboot/{{ item }}"
        dest: "{{ chroot_path }}/usr/share/secureboot/"
        mode: preserve
      loop:
        - GUID
        - keys
      when: __sbctl_init.stat.exists
      tags: ["sbctl"]

    - name: Write vconsole.conf
      ansible.builtin.copy:
        dest: "{{ chroot_path }}/etc/vconsole.conf"
        owner: root
        group: root
        mode: "0644"
        content: "{{ vconsole_conf | default('') }}\n"
      tags: ["vconsole"]

    - name: Install pipewire
      ansible.builtin.command:
        cmd: >-
          pacstrap -C /tmp/pacstrap.conf {{ chroot_path }}
            pipewire pipewire-alsa pipewire-pulse wireplumber
        creates: "{{ chroot_path }}/usr/bin/pipewire"
      tags: ["pipewire"]

    - name: Read passwd
      ansible.builtin.slurp:
        path: "{{ chroot_path }}/etc/passwd"
      register: __passwd
      tags: ["user"]

    - name: Create my user if it's missing
      ansible.builtin.command:
        cmd: >-
          arch-chroot {{ chroot_path }}
            useradd --create-home --btrfs-subvolume-home --groups wheel --shell /usr/bin/zsh --password {{ my_user_pass }} {{ my_user }}
      when: my_user not in __passwd.content | b64decode
      tags: ["user"]

  roles:
    - role: arch-common
      vars:
        hwclock_sync: false
      tags: ["arch-common"]

    - role: locale_conf
      tags: ["locale"]

    - role: sudo
      tags: ["sudo"]

    - role: sshd
      tags: ["sshd"]

    - role: hostname
      tags: ["hostname"]

    - role: systemd_networkd
      when: network_manager == "systemd-networkd"
      tags: ["systemd-networkd"]

    - role: sbctl
      vars:
        sbctl_enroll: false
      tags: ["sbctl"]

    - role: mkinitcpio
      tags: ["mkinitcpio"]

  post_tasks:
    - name: Install KDE
      ansible.builtin.command:
        cmd: >-
          pacstrap -C /tmp/pacstrap.conf {{ chroot_path }}
            plasma plasma-wayland-session kde-applications sddm xdg-desktop-portal-kde
        creates: "{{ chroot_path }}/usr/bin/sddm"
      when: desktop_environment == 'kde'
      tags: ["de"]

    - name: Install GNOME
      ansible.builtin.command:
        cmd: >-
          pacstrap -C /tmp/pacstrap.conf {{ chroot_path }}
            gnome xdg-desktop-portal-gnome
        creates: "{{ chroot_path }}/usr/bin/gdm"
      when: desktop_environment == 'gnome'
      tags: ["de"]

    - name: Install i3 packages
      ansible.builtin.command:
        cmd: >-
          pacstrap -C /tmp/pacstrap.conf {{ chroot_path }}
            {{ pacman_i3_packages | join(' ') }}
        creates: "{{ chroot_path }}/usr/bin/i3"
      when: desktop_environment in ["i3", "sway"]
      tags: ["de"]

    - name: Install Sway packages
      ansible.builtin.command:
        cmd: >-
          pacstrap -C /tmp/pacstrap.conf {{ chroot_path }}
            {{ pacman_sway_packages | join(' ') }}
        creates: "{{ chroot_path }}/usr/bin/sway"
      when: desktop_environment == "sway"
      tags: ["de"]

    - name: Enable services
      ansible.builtin.command:
        cmd: >-
          arch-chroot {{ chroot_path }}
            systemctl enable
              sshd firewalld {{ network_manager }}
              {% if desktop_environment == 'kde' %}
              sddm
              {% elif desktop_environment == 'gnome' %}
              gdm
              {% endif %}
        creates: "{{ chroot_path }}/etc/systemd/system/multi-user.target.wants/sshd.service"
      tags: ["services"]
