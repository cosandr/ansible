---

- name: Setup ESXi remount
  hosts: truenas
  gather_facts: false
  vars:
    __ssh_vars: &ssh_vars
      ansible_connection: ssh
      ansible_user: root
      ansible_host: "{{ local_ips.general }}"
      ansible_python_interpreter: /usr/local/bin/python3
  tasks:
    - name: Generate SSH key
      vars: *ssh_vars
      community.crypto.openssh_keypair:
        path: /root/.ssh/id_rsa
        comment: "root@{{ inventory_hostname }}.hlab.no"
      register: __root_key
      tags: ["ssh"]

    - name: Copy SSH key to ESXi host
      delegate_to: "{{ item }}"
      ansible.posix.authorized_key:
        user: root
        comment: "{{ __root_key.comment }}"
        key: "{{ __root_key.public_key }}"
        path: "/etc/ssh/keys-root/authorized_keys"
      loop: "{{ groups['esxi_hosts'] }}"
      tags: ["ssh"]

    - name: Scan ESXi host keys
      vars: *ssh_vars
      command: "ssh-keyscan {{ hostvars[item].ansible_host }},{{ item }}.{{ hostvars[item].domain }}"
      check_mode: false
      changed_when: false
      loop: "{{ groups['esxi_hosts'] }}"
      register: __host_keys
      tags: ["ssh"]

    - name: Ensure host keys are in known_hosts
      vars: *ssh_vars
      blockinfile:
        path: /root/.ssh/known_hosts
        create: true
        mode: 0644
        block: |
          {% for h in __host_keys.results %}
          {{ h.stdout }}
          {% endfor %}
      tags: ["ssh"]

    - name: Create esxi folder
      vars: *ssh_vars
      ansible.builtin.file:
        path: /root/esxi
        state: directory
        owner: root
        group: wheel
        mode: 0750

    - name: Copy list of hosts
      vars: *ssh_vars
      ansible.builtin.copy:
        content: |
          esxi_hosts=({{ groups['esxi_hosts'] | map('extract', hostvars, 'ansible_host') | join(' ') }})
        dest: /root/esxi/hosts
        owner: root
        group: wheel
        mode: 0640
      tags: ["hosts"]

    - name: Copy scripts
      vars: *ssh_vars
      ansible.builtin.copy:
        src: "{{ inventory_dir }}/files/truenas/{{ item.src }}"
        dest: "/root/esxi/{{ item.dest }}"
        owner: root
        group: wheel
        mode: 0750
      loop:
        - src: "esxi-remount-nfs.sh"
          dest: "remount-nfs.sh"
        - src: "esxi-common.sh"
          dest: "common"
        - src: "esxi-start-vm.sh"
          dest: "start-vm.sh"
        - src: "esxi-stop-vm.sh"
          dest: "stop-vm.sh"
        - src: "esxi-startup.sh"
          dest: "startup.sh"
        - src: "esxi-shutdown.sh"
          dest: "shutdown.sh"
        - src: "esxi-stop-all-datastore-vms.sh"
          dest: "stop-all-datastore-vms.shh"
      tags: ["script"]

  tags: ["esxi-nfs"]


- name: Create tank NFS shares
  hosts: truenas
  gather_facts: false
  pre_tasks:
    - name: Prepare shares
      set_fact:
        truenas_config_sharing_nfs: "{{ paths | create_nfs_models(hosts, kwargs=kwargs, shares=truenas_config_sharing_nfs) }}"
      vars:
        paths:
          - "/mnt/tank"
          - "/mnt/tank/archive"
          - "/mnt/tank/backup"
          - "/mnt/tank/borg"
          - "/mnt/tank/downloads"
          - "/mnt/tank/games"
          - "/mnt/tank/media"
          - "/mnt/tank/media/photo"
          - "/mnt/tank/media/motion"
          - "/mnt/tank/yes"
        hosts: "{{ groups['backup'] | map('extract', hostvars, 'ansible_host') + [ hostvars['desktop'].ansible_host, hostvars['dresrv'].ansible_host ] }}"
        kwargs:
          maproot_user: root
          maproot_group: wheel
      tags: ["tank"]

  tasks:
    - name: Configure NFS shares
      spatiumcepa.truenas.truenas_api_sharing_nfs:
        model: "{{ item.model }}"
        state: "{{ item.state | default('present') }}"
      loop: "{{ truenas_config_sharing_nfs }}"
      tags: ["tank"]

- name: Create plex NFS shares
  hosts: truenas
  gather_facts: false
  vars:
    plex_paths:
      - "/mnt/tank/media"
      - "/mnt/tank/media/photo"
      - "/mnt/tank/media/motion"
  pre_tasks:
    - name: Prepare shares
      set_fact:
        truenas_config_sharing_nfs: "{{ plex_paths | create_nfs_models(hosts, kwargs=kwargs, shares=truenas_config_sharing_nfs) }}"
      vars:
        hosts: "{{ groups['plex'] | map('extract', hostvars, 'ansible_host') }}"
        kwargs:
          ro: true
          comment: 'Plex shares'
      tags: ["plex", "nfs"]

  tasks:
    - name: Configure NFS shares
      spatiumcepa.truenas.truenas_api_sharing_nfs:
        model: "{{ item.model }}"
        state: "{{ item.state | default('present') }}"
      loop: "{{ truenas_config_sharing_nfs }}"
      tags: ["plex", "nfs"]

    - name: Create Plex group
      spatiumcepa.truenas.truenas_api_group:
        model:
          name: plex
          smb: false
          gid: "{{ hostvars['plex01'].plex_uid }}"
      tags: ["plex"]

    - name: Create Plex user
      spatiumcepa.truenas.truenas_api_user:
        model:
          username: plex
          full_name: "Plex user"
          smb: false
          password_disabled: true
          uid: "{{ hostvars['plex01'].plex_uid }}"
          # It gets assigned the group that was created above
          group_create: true
      tags: ["plex"]

    - name: Set plex ACLs
      # acl module doesn't support recursive on BSD
      command: "setfacl -R -m u:plex:rx:df:allow /mnt/tank/media"
      vars:
        ansible_connection: ssh
        ansible_host: "{{ local_ips.general }}"
        ansible_user: root
        ansible_python_interpreter: /usr/local/bin/python3
      tags: ["plex", "acl"]

- name: Create gitlab NFS shares
  hosts: truenas
  gather_facts: false
  vars:
    gitlab_paths:
      - /mnt/tank/backup/gitlab
  pre_tasks:
    - name: Create paths
      vars:
        ansible_connection: ssh
        ansible_host: "{{ local_ips.general }}"
        ansible_user: root
        ansible_python_interpreter: /usr/local/bin/python3
      file:
        path: "{{ item }}"
        state: directory
      loop: "{{ gitlab_paths }}"
      tags: ["gitlab"]

    - name: Prepare shares
      set_fact:
        truenas_config_sharing_nfs: "{{ gitlab_paths | create_nfs_models(hosts, kwargs=kwargs, shares=truenas_config_sharing_nfs) }}"
      vars:
        hosts: "{{ groups['gitlab'] | map('extract', hostvars, 'ansible_host') }}"
        kwargs:
          maproot_user: root
          maproot_group: wheel
          comment: 'Gitlab backup shares'
      tags: ["gitlab", "nfs"]

  tasks:
    - name: Configure NFS shares
      spatiumcepa.truenas.truenas_api_sharing_nfs:
        model: "{{ item.model }}"
        state: "{{ item.state | default('present') }}"
      loop: "{{ truenas_config_sharing_nfs }}"
      tags: ["gitlab", "nfs"]

- name: Create jails
  hosts: jails
  gather_facts: false
  tasks:
    - block:
        - name: Create jail
          iocage:
            name: "{{ jail_name }}"
            state: present
            release: "{{ jail_release }}"
            properties: "{{ jail_properties }}"

        - name: Ensure jail is running
          iocage:
            name: "{{ jail_name }}"
            state: started
          tags: ["start"]

        - name: Bootstrap pkg
          iocage:
            name: "{{ jail_name }}"
            state: exec
            cmd: "pkg bootstrap -y"
          tags: ["pkg", "bootstrap"]

        - name: Install initial packages
          iocage:
            name: "{{ jail_name }}"
            state: pkg
            cmd: "install -y {{ jail_packages | join(' ') }}"
          tags: ["pkg"]

      tags: ["create"]
      delegate_to: truenas
      vars:
        ansible_connection: ssh
        ansible_host: "{{ local_ips.general }}"
        ansible_user: root
        ansible_python_interpreter: /usr/local/bin/python3

- name: Setup node_exporter
  hosts: truenas-node_exporter
  gather_facts: false
  tasks:
    - name: Create start_node.sh
      template:
        src: "{{ inventory_dir }}/files/truenas/start_node.sh.j2"
        dest: /root/start_node.sh
        owner: root
        group: wheel
        mode: 0750
      delegate_to: truenas
      vars:
        ansible_connection: ssh
        ansible_host: "{{ local_ips.general }}"
        ansible_user: root
        ansible_python_interpreter: /usr/local/bin/python3
      tags: ["start-node"]

- name: Setup certbot jail
  hosts: truenas-certbot
  pre_tasks:
    - name: Install packages
      community.general.pkgng:
        name:
          - bash
          - vim
        state: present
      tags: ["certbot", "install"]

  roles:
    - role: certbot
      tags: ["certbot"]

  post_tasks:
    - block:
        - block:
            - name: Create certbot dir
              file:
                path: /root/certbot
                state: directory
                owner: root
                group: wheel
                mode: 0750

            - name: Download deploy_freenas.py
              get_url:
                url: https://raw.githubusercontent.com/danb35/deploy-freenas/master/deploy_freenas.py
                dest: /root/certbot/deploy_freenas.py
                owner: root
                group: wheel
                mode: 0750
              tags: ["deploy"]

            - name: Create deployment config
              template:
                src: "{{ inventory_dir }}/files/truenas/certbot-deploy.conf.j2"
                dest: /root/certbot/deploy.conf
                owner: root
                group: wheel
                mode: 0640
              tags: ["deploy"]

            - name: Create update.sh
              template:
                src: "{{ inventory_dir }}/files/truenas/certbot-update.sh.j2"
                dest: /root/certbot/update.sh
                owner: root
                group: wheel
                mode: 0750

            - name: Create renew.sh
              template:
                src: "{{ inventory_dir }}/files/truenas/certbot-renew.sh.j2"
                dest: /root/certbot/renew.sh
                owner: root
                group: wheel
                mode: 0750

          vars:
            ansible_connection: ssh
            ansible_host: "{{ local_ips.general }}"
            ansible_user: root
            ansible_python_interpreter: /usr/local/bin/python3
            __exec: "/usr/local/bin/iocage exec certbot"
            __certbot_venv_update_pre: "{{ __exec }} /opt/certbot/bin/pip install --upgrade pip setuptools wheel"
            __certbot_venv_update: "{{ __exec }} /opt/certbot/bin/pip install --upgrade {{ (certbot_pkgs + certbot_extra_pkgs) | join(' ') }}"
            __certbot_renew: "{{ __exec }} /opt/certbot/bin/certbot renew -n"
          tags: ["scripts"]

        - name: Add TrueNAS cron job for auto-update
          spatiumcepa.truenas.truenas_api_cronjob:
            model:
              description: Certbot auto-update
              command: "/root/certbot/update.sh"
              enabled: true
              schedule:
                dom: "*"
                dow: "*"
                hour: "4"
                minute: "0"
                month: "*/1"
              stderr: false
              stdout: true
              user: root

        - name: Add TrueNAS cron job for auto-renew
          delegate_to: truenas
          spatiumcepa.truenas.truenas_api_cronjob:
            model:
              description: Certbot auto-renew
              command: "/root/certbot/renew.sh"
              enabled: true
              schedule:
                dom: "*"
                dow: "*"
                hour: "*/12"
                minute: "25"
                month: "*"
              stderr: false
              stdout: true
              user: root

      delegate_to: truenas
      tags: ["certbot", "cron"]
