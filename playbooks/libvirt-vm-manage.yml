#!/usr/bin/env -S ansible-playbook
---

- name: Manage VMs
  hosts: libvirt
  gather_facts: false
  pre_tasks:
    - name: Check if hypervisors are up
      run_once: true
      check_mode: false
      delegate_to: localhost
      ansible.builtin.command:
        cmd: "ping -q -n -c1 -W1 {{ hostvars[item].ansible_host }}"
      failed_when:
        # 0 OK, 1 failure on Linux, 2 failure on MacOS
        - __hv_ping.rc not in [0, 1, 2]
      changed_when: false
      loop: "{{ groups['kvm_hv'] }}"
      register: __hv_ping
      tags: ["always"]

    - name: Set state filter from tags
      ansible.builtin.set_fact:
        vm_state_filter: >-
          {%- if 'stop' in ansible_run_tags -%}
          running
          {%- elif 'start' in ansible_run_tags -%}
          shutdown
          {%- else -%}
          false
          {%- endif -%}
      tags: ["always"]

    - name: Get list of VMs on all hosts
      run_once: true
      check_mode: false
      delegate_to: "{{ item }}"
      community.libvirt.virt:
        state: "{{ vm_state_filter | default(omit, true) }}"
        command: list_vms
      register: __vm_names
      loop: "{{ __hv_ping.results | selectattr('rc', 'eq', 0) | map(attribute='item') }}"
      tags: ["always"]

    - name: Find current host for self
      ansible.builtin.set_fact:
        current_host_list: "{{ __vm_names.results | selectattr('list_vms', 'search', inventory_hostname) | map(attribute='item') | list }}"
      tags: ["always"]

    - name: Set delegate_host var
      ansible.builtin.set_fact:
        delegate_host: "{{ current_host_list[0] if current_host_list else vm_host }}"
      tags: ["always"]

  tasks:
    - name: Start VMs
      delegate_to: "{{ delegate_host }}"
      community.libvirt.virt:
        name: "{{ inventory_hostname }}"
        state: "running"
        autostart: "{{ vm_autostart | bool }}"
      tags: ["start"]
      when: "'start' in ansible_run_tags"

    - name: Stop VMs
      delegate_to: "{{ delegate_host }}"
      community.libvirt.virt:
        name: "{{ inventory_hostname }}"
        state: "shutdown"
      tags: ["stop"]
      when: "'stop' in ansible_run_tags"

    - name: "Ensure autostart is {{ vm_autostart | bool | ternary('enabled', 'disabled') }}"
      delegate_to: "{{ delegate_host }}"
      community.libvirt.virt:
        name: "{{ inventory_hostname }}"
        autostart: "{{ vm_autostart | bool }}"
      tags: ["autostart"]

    - name: Run provided virsh command  # noqa no-changed-when
      delegate_to: "{{ delegate_host }}"
      ansible.builtin.command:
        # NOTE: Multiple arguments don't work, only first word is passed
        cmd: "virsh {{ cmd }} --domain {{ inventory_hostname }}"
      tags: ["cmd"]
      register: __virsh
      when: cmd is defined

    - name: Show output
      ansible.builtin.debug:
        msg: "{{ __virsh.stdout_lines }}"
      when: __virsh.stdout_lines is defined
      tags: ["cmd"]
