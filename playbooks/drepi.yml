#!/usr/bin/env -S ansible-playbook
---
- name: SSH
  hosts: drepi
  gather_facts: true
  vars:
    ansible_ssh_pass: raspberry  # fresh install
  tasks:
    # Set up ssh
    # https://github.com/hannseman/ansible-raspbian
    - name: add SSH keys
      authorized_key:
        user: "{{ ansible_user }}"
        key: "{{ item }}"
        state: present
      with_items: "{{ ssh_authorized_keys }}"
      tags: ["ssh"]

  roles:
    - role: sshd
      vars:
        _sshd_pkg: "openssh-server"
      become: true
      tags: ["sshd"]

- name: Raspberry Pi 4 playbook
  gather_facts: false
  become: true
  hosts: drepi
  vars:
    system_timezone: "Europe/Oslo"
    system_locale: "en_US.UTF-8"
    motion_smb_cred_file: "/etc/samba/credentials/motion"
  handlers:
    - name: reload firewalld
      become: true
      service:
        name: firewalld
        state: reloaded

    - name: restart firewalld
      become: true
      service:
        name: firewalld
        state: restarted

    - name: reboot
      become: true
      reboot: {}

    - name: update-locale
      become: true
      command: "/usr/sbin/update-locale LANG={{ system_locale }}"

    - name: enable and start daily reboot timer
      become: true
      systemd:
        name: sched-reboot.timer
        state: started
        enabled: true

  pre_tasks:
    - name: Run common role
      import_role:
        name: common
      tags: ["always"]

    - name: Gather facts
      setup:
      tags: ["always"]

    - name: Ensure camera is enabled
      become: true
      lineinfile:
        dest: "/boot/config.txt"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      notify: reboot
      with_items:
        - regexp: "^#?start_x"
          line: "start_x=1"
        - regexp: "^#?gpu_mem"
          line: "gpu_mem=128"
      tags: ["motion"]

    # NOTE: might need 'sudo rpi-update'
    # - name: Ensure kernel module is loaded at boot
    #   become: true
    #   lineinfile:
    #     dest: "/etc/modules-load.d/modules.conf"
    #     regexp: "^#?bcm2835-v4l2"
    #     line: "bcm2835-v4l2"
    #     state: present
    #   notify: reboot
    #   tags: ["motion"]
  tasks:
    # locale
    - block:
      - name: set timezone
        timezone:
          name: "{{ system_timezone }}"

      - name: ensure locale exists
        locale_gen:
          name: "{{ system_locale }}"
          state: present
        notify: update-locale

      - name: set default system locale
        debconf:
          name: 'locales'
          question: 'locales/default_environment_locale'
          vtype: 'string'
          value: "{{ system_locale }}"
        notify: update-locale

      tags: ["locale"]
      become: true
    # firewalld
    - block:
        - name: install firewalld and nftables
          package:
            name:
              - firewalld
              - nftables
            state: present
          tags: ["install"]

        - name: configure firewalld to use nftables
          lineinfile:
            dest: "/etc/firewalld/firewalld.conf"
            regexp: "^FirewallBackend"
            line: "FirewallBackend=nftables"
            state: present
          notify: restart firewalld

        - name: add interfaces to public zone
          ansible.posix.firewalld:
            zone: public
            interface: "{{ item }}"
            state: enabled
            permanent: true
          notify: reload firewalld
          with_items:
            - "eth0"
            - "wlan0"

        - name: ensure trusted is set to accept
          ansible.posix.firewalld:
            zone: trusted
            target: "ACCEPT"
            state: enabled
            permanent: true
          notify: reload firewalld

        - name: add trusted sources
          ansible.posix.firewalld:
            zone: trusted
            source: "{{ item }}"
            state: enabled
            permanent: true
          notify: reload firewalld
          with_items: "{{ firewalld_trusted_sources }}"

        - name: add local network to home zone
          ansible.posix.firewalld:
            zone: home
            source: "{{ ansible_default_ipv4.network }}/24"
            state: enabled
            permanent: true
          notify: reload firewalld

        - name: disallow ssh from public
          ansible.posix.firewalld:
            zone: public
            service: ssh
            state: disabled
            permanent: true
          notify: reload firewalld

        - name: allow ssh from home
          ansible.posix.firewalld:
            zone: home
            service: ssh
            state: enabled
            permanent: true
          notify: reload firewalld

        - name: start and enable firewalld
          service:
            name: firewalld
            state: started
            enabled: true

      become: true
      when: firewall_frontend == "firewalld"
      tags: ["firewalld"]

  roles:
    - role: hostname
      become: true
      tags: ["hostname"]

    - role: ufw
      become: true
      when: firewall_frontend == "ufw"
      tags: ["ufw"]

    - role: motion
      tags: ["motion"]

    - role: unattended-upgrades
      tags: ["unattended-upgrades"]

    - role: journalbeat
      become: true
      tags: ["journalbeat"]

  post_tasks:
    - block:
      - name: Install smbclient
        package:
          name: smbclient
          state: present
        tags: ["install"]

      - name: Ensure smb credentials dir exists
        file:
          path: "{{ motion_smb_cred_file | dirname }}"
          state: directory
          owner: root
          group: root
          mode: 0700

      - name: Add motion smb credentials
        copy:
          content: |
            username=motion
            password={{ motion_smb_pass }}
          dest: "{{ motion_smb_cred_file }}"
          owner: root
          group: root
          mode: 0600

      - name: Mount motion share
        mount:
          path: /mnt/motion
          src: "//{{ hostvars.dresrv.ansible_host }}/motion"
          fstype: cifs
          state: mounted
          opts: "credentials={{ motion_smb_cred_file }},nofail,uid=motion,gid=adm,file_mode=0640,dir_mode=0750"
      become: true
      tags: ["motion"]
    - block:
      - name: install mailx and postfix
        apt:
          name:
            - bsd-mailx
            - postfix
          state: present

      # NOTE: manually run dpgk-reconfigure postfix
      - name: configure postfix
        lineinfile:
          dest: "/etc/postfix/main.cf"
          regexp: "{{ item.regexp }}"
          line: "{{ item.line }}"
          state: present
        with_items:
          - regexp: "^#?relayhost"
            line: "relayhost = [{{ smtp_host }}]:{{ smtp_port }}"
          - regexp: "^#?smtp_use_tls"
            line: "smtp_use_tls = yes"
          - regexp: "^#?smtp_sasl_auth_enable"
            line: "smtp_sasl_auth_enable = yes"
          - regexp: "^#?smtp_sasl_security_options"
            line: "smtp_sasl_security_options ="
          - regexp: "^#?smtp_sasl_password_maps"
            line: "smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd"
          - regexp: "^#?smtp_tls_CAfile"
            line: "smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt"

      - name: configure postfix sasl_password
        copy:
          dest: /etc/postfix/sasl_passwd
          owner: root
          group: root
          mode: 0600
          content: |
            [{{ smtp_host }}]:{{ smtp_port }}    {{ smtp_user }}:{{ smtp_pass }}
        register: sasl_password

      - name: regenerate sasl_passwd.db
        command: "/usr/sbin/postmap /etc/postfix/sasl_passwd"
        when: sasl_password.changed
      become: true
      tags: ["unattended-upgrades"]
    - name: Create daily reboot timer
      become: true
      copy:
        dest: "/etc/systemd/system/sched-reboot.timer"
        owner: root
        group: root
        mode: 0644
        content: |
          [Unit]
          Description=Reboot Daily around 03:00
          [Timer]
          RandomizedDelaySec=10m
          OnCalendar=*-*-* 03:00:00
          Unit=reboot.target

          [Install]
          WantedBy=timers.target
      notify:
        - reload systemd
        - enable and start daily reboot timer
      tags: ["scheduled-reboot"]
