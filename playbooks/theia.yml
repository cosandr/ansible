#!/usr/bin/env -S ansible-playbook
---

- name: Provision Theia
  hosts: theia
  pre_tasks:
    - name: ZFS tasks
      tags: ["zfs"]
      block:
        - name: Prefer ZFS backports packages
          ansible.builtin.copy:
            content: |
              Package: src:zfs-linux
              Pin: release n={{ ansible_distribution_release | lower }}-backports
              Pin-Priority: 990
            dest: "/etc/apt/preferences.d/90_zfs"
            owner: root
            group: root
            mode: "0644"
          tags: ["apt", "install"]

        - name: Install ZFS requirements
          ansible.builtin.apt:
            name:
              - dpkg-dev
              - "linux-headers-amd64{% if deb_backports_kernel %}/{{ ansible_distribution_release | lower }}-backports{% endif %}"
            state: present
          tags: ["install"]

        - name: Install ZFS
          ansible.builtin.apt:
            name:
              - zfs-dkms
              - zfsutils-linux
              - zfs-dracut
            state: present
          tags: ["install"]
  tasks:
    - name: Setup syno auto shutdown
      tags: ["borg", "syno"]
      vars:
        borg_user: "{{ hostvars['syno'].borg_user }}"
        borg_group: "{{ hostvars['syno'].borg_group }}"
      block:
        - name: Generate control SSH key
          community.crypto.openssh_keypair:
            path: "/root/.ssh/id_ed25519.syno"
            type: ed25519
            comment: "root@{{ inventory_hostname }}"
          register: __ssh_key

        - name: Copy SSH key to syno
          delegate_to: syno
          become: true
          ansible.posix.authorized_key:
            user: "{{ borg_user }}"
            comment: "{{ __ssh_key.comment }}"
            key: "{{ __ssh_key.public_key }}"
            key_options: 'command="/bin/bash /volume1/backup/theia-entrypoint.sh",restrict'

        # Synology doesn't have visudo
        - name: Copy temporary sudoers file
          delegate_to: localhost
          ansible.builtin.copy:
            content: |
              {{ borg_user }} ALL= NOPASSWD: /usr/sbin/poweroff
            dest: /tmp/syno-borg-nopasswd
            mode: "0644"
            validate: 'visudo -cf %s'
          tags: ["sudo"]

        - name: Copy sudoers config to syno
          delegate_to: syno
          become: true
          ansible.builtin.copy:
            src: /tmp/syno-borg-nopasswd
            dest: /etc/sudoers.d/10-borg-poweroff
            owner: root
            group: root
            mode: "0640"
          tags: ["sudo"]

        - name: Copy theia-entrypoint
          delegate_to: syno
          become: true
          ansible.builtin.template:
            src: "{{ repo_base_dir }}/files/borg/theia-entrypoint.sh.j2"
            dest: /volume1/backup/theia-entrypoint.sh
            owner: "{{ borg_user }}"
            group: "{{ borg_group }}"
            mode: "0755"
          tags: ["script"]

    - name: ZFS tasks
      tags: ["zfs"]
      block:
        - name: Enable zpool scrub timers
          ansible.builtin.systemd:
            name: "zfs-scrub-{{ item.schedule }}@{{ item.pool }}.timer"
            state: started
            enabled: true
          loop: "{{ zfs_scrub_timers | default([]) }}"
          tags: ["scrub"]

        - name: Configure max ZFS ARC size
          ansible.builtin.copy:
            dest: /etc/modprobe.d/zfs.conf
            owner: root
            group: root
            mode: "0644"
            content: |
              options zfs zfs_arc_max={{ zfs_arc_max_gb * 2**30 }}
          notify: Dracut regenerate
          tags: ["arc"]

  roles:
    - role: samba
      tags: ["samba"]

    - role: systemd
      tags: ["systemd", "rclone"]

    - role: nginx_pre
      tags: ["nginx"]

    - role: nginx
      tags: ["nginx"]

    - role: syncthing
      tags: ["syncthing"]

    - role: zfs_zed
      tags: ["zfs", "zed"]

    - role: sanoid
      tags: ["zfs", "sanoid"]

    - role: minio
      tags: ["minio"]

  post_tasks:
    - name: Create .mc dir
      ansible.builtin.file:
        state: directory
        path: "/root/.mc"
        owner: root
        group: root
        mode: "0755"
      tags: ["minio", "config"]

    - name: Write client config
      ansible.builtin.copy:
        content: "{{ minio_client_config | to_nice_json(indent=2) }}"
        dest: "/root/.mc/config.json"
        owner: root
        group: root
        mode: "0600"
      tags: ["minio", "config"]

  handlers:
    - name: Dracut regenerate  # noqa no-changed-when - handler
      ansible.builtin.command: dracut -f
