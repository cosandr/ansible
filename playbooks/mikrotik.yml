#!/usr/bin/env -S ansible-playbook
---

- name: Configure using SSH
  hosts: mikrotik
  gather_facts: false
  vars:
    p12_path: "/tmp/{{ inventory_hostname }}.p12"
  roles:
    - role: ownca
      when: "'generate' in ansible_run_tags"
      tags: ["generate"]

  tasks:
    - name: Configure groups
      community.routeros.command:
        commands:
          - >
            :if ([/user group find name={{ item.name }}]) do={
              /user group set [find name={{ item.name }}] {{ item.args | community.routeros.join }}
            } else={
              /user group add name={{ item.name }} {{ item.args | community.routeros.join }}
            }
          - /user group print
        wait_for: result[1] contains {{ item.name }}
      loop: "{{ mt_groups | default([]) }}"
      loop_control:
        label: "{{ item.name }}"
      when: not ansible_check_mode
      tags: ["groups"]

    - name: Configure users
      community.routeros.command:
        commands:
          - >
            :if ([/user find name={{ item.name }}]) do={
              /user set [find name={{ item.name }}] {{ item.args | community.routeros.join }}
            } else={
              /user add name={{ item.name }} {{ item.args | community.routeros.join }}
            }
          - /user print
        wait_for: result[1] contains {{ item.name }}
      loop: "{{ mt_users | default([]) }}"
      loop_control:
        label: "{{ item.name }}"
      when: not ansible_check_mode
      tags: ["users"]

    - name: Backup config
      when: "'backup' in ansible_run_tags"
      tags: ["backup"]
      block:
        - name: Get config content
          check_mode: false
          no_log: true
          community.routeros.command:
            commands: /export show-sensitive
          register: __config

        - name: GPG encrypt config
          no_log: true
          become: false
          delegate_to: localhost
          check_mode: false
          changed_when: false
          ansible.builtin.command:
            cmd: "gpg -e -r {{ my_email_alt }} --armor"
            stdin: "{{ __config.stdout[0] }}"
          register: __enc_config

        - name: Create backup dir on theia
          become: true
          delegate_to: theia
          ansible.builtin.file:
            path: "/mnt/tank/backup/mikrotik"
            state: directory
            owner: root
            group: root
            mode: "0750"

        - name: Write to file
          become: true
          delegate_to: theia
          ansible.builtin.copy:
            content: "{{ __enc_config.stdout }}"
            dest: "/mnt/tank/backup/mikrotik/{{ inventory_hostname }}.rsc.asc"
            owner: root
            group: root
            mode: "0640"

  post_tasks:
    - name: Generate and copy bundle
      tags: ["tls-setup"]
      when: "'tls-setup' in ansible_run_tags"
      block:
        - name: Generate random password
          ansible.builtin.set_fact:
            random_password: "{{ lookup('community.general.random_string', length=32, override_all='0123456789abcdefghijklmnopqrstuvwxyz') }}"

        - name: Create PKCS#12 bundle
          delegate_to: localhost
          community.crypto.openssl_pkcs12:
            path: "{{ p12_path }}"
            certificate_path: "{{ ownca_cert_list[0].publickey_path }}"
            privatekey_passphrase: "{{ key_passphrase }}"
            privatekey_content: "{{ lookup('file', ownca_cert_list[0].privatekey_path) }}"
            friendly_name: '{{ inventory_hostname }}'
            passphrase: "{{ random_password }}"
            mode: "0600"

        - name: Copy router certificate onto router
          ansible.netcommon.net_put:
            src: "{{ p12_path }}"
            dest: "{{ inventory_hostname }}.p12"

        - name: Install router certificate and clean up
          community.routeros.command:
            commands:
              # Import certificate:
              - /certificate import name={{ inventory_hostname }} file-name={{ inventory_hostname }}.p12 passphrase="{{ random_password }}"
              # Remove PKCS12 bundle:
              - /file remove {{ inventory_hostname }}.p12
              # Show certificates
              - /certificate print
          when: not ansible_check_mode
          register: output

      always:
        - name: Delete PKCS12 bundle
          delegate_to: localhost
          ansible.builtin.file:
            path: "{{ p12_path }}"
            state: absent

    - name: Use certificate
      community.routeros.command:
        commands:
          - /ip service set www-ssl certificate={{ inventory_hostname }} tls-version=only-1.2
          - /ip service set api-ssl certificate={{ inventory_hostname }} disabled=no tls-version=only-1.2
      tags: ["tls-setup"]
      when:
        - not ansible_check_mode
        - "'tls-setup' in ansible_run_tags"

- name: Configure using API
  hosts: mikrotik
  gather_facts: false
  module_defaults:
    group/community.routeros.api:
      hostname: "{{ ansible_host }}"
      username: "{{ api_username }}"
      password: "{{ api_password }}"
      tls: true
      validate_certs: true
      validate_cert_hostname: true
      ca_path: "{{ ca_publickey_path }}"

  tasks:
    - name: Configure admin user allowed-ips  # noqa args[module]
      # API user doesn't have permissions to edit admin
      check_mode: true
      delegate_to: localhost
      community.routeros.api_find_and_modify:
        path: user
        find:
          "name": "{{ ansible_user }}"
        values:
          address: "{{ mt_admin_allowed_addresses | join(',') }}"
        require_matches_min: 1
        require_matches_max: 1
      when: mt_admin_allowed_addresses | default([])
      notify: Apply admin allowed-ips
      tags: ["user", "admin"]

    - name: Configure identities  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: system identity
        data:
          - name: "{{ inventory_hostname }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      tags: ["identity"]

    - name: Configure NTP clients  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: system ntp client
        data:
          - enabled: true
            servers: 0.pool.ntp.org,1.pool.ntp.org
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      tags: ["ntp"]

    - name: Configure system clock  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: system clock
        data:
          - time-zone-name: "Europe/Oslo"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      tags: ["clock"]

    - name: Enable routerboard auto-upgrade  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: system routerboard settings
        data:
          - auto-upgrade: true
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      tags: ["routerboard"]

    - name: Disable bandwidth-server  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: tool bandwidth-server
        data:
          - enabled: false
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      tags: ["bandwidth-server"]

    - name: Create bridges  # noqa args[module]
      community.routeros.api_modify:
        path: interface bridge
        data:
          - name: "{{ item.name }}"
      loop: "{{ mt_bridges }}"
      loop_control:
        label: "{{ item.name }}"
      when: mt_bridges | default([])
      tags: ["interfaces", "bridge"]

    - name: Configure bonds  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: interface bonding
        data: "{{ mt_bonds }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_bonds | default([])
      tags: ["interfaces", "bond"]

    - name: Include VLAN role
      ansible.builtin.include_role:
        name: andrei.utils.mt_vlans
        apply:
          tags: ["interfaces", "vlan"]
      vars:
        mt_bridge_name: "{{ mt_bridges[0].name }}"
      tags: ["interfaces", "vlan"]
      when: mt_trunk_ports | default([]) or
            mt_access_ports | default([])

    - name: Enable VLAN filtering [legacy]  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_find_and_modify:
        path: interface ethernet switch
        find: {}
        values:
          drop-if-invalid-or-src-port-not-member-of-vlan-on-ports: "{{ mt_bridge_ports | join(',') }}"
      tags: ["interfaces", "bridge"]
      when:
        - mt_bridges | default([])
        - mt_bridge_ports | default([])
        - mt_vlan_legacy | default(false)

    - name: Enable VLAN filtering [modern]  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: interface bridge
        data: "{{ mt_bridges }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      tags: ["interfaces", "bridge"]
      when:
        - mt_bridges | default([])
        - not mt_vlan_legacy | default(false)

    - name: Configure graphing interfaces  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: tool graphing interface
        data: "{{ mt_graphing_interfaces }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_graphing_interfaces | default([])
      tags: ["graphing"]

    - name: Configure graphing resources  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: tool graphing resource
        data: "{{ mt_graphing_resources }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_graphing_resources | default([])
      tags: ["graphing"]

    - name: Configure routing IDs  # noqa args[module]
      community.routeros.api_modify:
        path: routing id
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
        data: "{{ mt_routing_ids }}"
      when: mt_routing_ids | default([])
      tags: ["routing"]

    - name: Configure BGP peers  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: routing bgp connection
        data: "{{ mt_bgp_peers }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_bgp_peers | default([])
      tags: ["bgp"]

    - name: Configure services  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip service
        data: "{{ mt_services }}"
      tags: ["services"]

    - name: Configure UPnP  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip upnp
        data:
          - enabled: "{{ mt_upnp_interfaces | default([]) | length > 0 }}"
            allow-disable-external-interface: false
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      tags: ["upnp"]

    - name: Configure UPnP interfaces  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip upnp interfaces
        data: "{{ mt_upnp_interfaces | default([]) }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      tags: ["upnp"]

    - name: Configure scripts  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: system script
        data: "{{ mt_scripts }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_scripts | default([])
      tags: ["scripts"]

    - name: Configure IPv4 addresses  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip address
        data: "{{ mt_ip_addresses | default([]) }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      tags: ["address"]

    - name: Configure IPv4 routes  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip route
        data: "{{ mt_ip_routes }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_ip_routes | default([])
      tags: ["route"]

    - name: Configure IPv4 pools  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip pool
        data: "{{ mt_ip_pools }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_ip_pools | default([])
      tags: ["dhcp", "pool"]

    - name: Configure IPv4 DHCP clients  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip dhcp-client
        data: "{{ mt_dhcp_clients }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_dhcp_clients | default([])
      tags: ["dhcp"]

    - name: Configure IPv4 DHCP servers  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip dhcp-server
        data: "{{ mt_dhcp_servers }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_dhcp_servers | default([])
      tags: ["dhcp"]

    - name: Configure IPv4 DHCP networks  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip dhcp-server network
        data: "{{ mt_dhcp_networks }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_dhcp_networks | default([])
      tags: ["dhcp"]

    - name: Configure IPv4 DHCP server leases  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip dhcp-server lease
        data: "{{ mt_dhcp_leases }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_dhcp_leases | default([])
      tags: ["dhcp"]

    - name: Configure wireguard interfaces  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: interface wireguard
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
        data: "{{ mt_wg_interfaces }}"
      when: mt_wg_interfaces | default([])
      tags: ["interfaces", "wg"]

    - name: Configure wireguard peers  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: interface wireguard peers
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
        data: "{{ mt_wg_peers }}"
      when: mt_wg_peers | default([])
      tags: ["wg", "peers"]

    - name: Configure interface lists  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: interface list
        data: "{{ mt_interface_list }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_interface_list | default([])
      tags: ["interfaces", "firewall"]

    - name: Configure interface members  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: interface list member
        data: "{{ mt_interface_members }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_interface_members | default([])
      tags: ["interfaces", "firewall"]

    - name: Configure IPv4 firewall lists  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip firewall address-list
        data: "{{ mt_firewall_address_lists }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_firewall_address_lists | default([])
      tags: ["firewall", "lists"]

    - name: Configure IPv4 firewall filters  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip firewall filter
        data: "{{ mt_firewall_rules }}"
        ensure_order: true
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_firewall_rules | default([])
      tags: ["firewall", "filter"]

    - name: Configure IPv4 firewall NAT  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip firewall nat
        data: "{{ mt_firewall_nat }}"
        ensure_order: true
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_firewall_nat | default([])
      tags: ["firewall", "nat"]

    - name: Configure IPv4 firewall raw  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip firewall raw
        data: "{{ mt_firewall_raw }}"
        ensure_order: true
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_firewall_raw | default([])
      tags: ["firewall", "raw"]

    - name: Configure IPv6 ND  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ipv6 nd
        data: "{{ mt_ipv6_nd }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_ipv6_nd | default([])
      tags: ["ipv6", "nd"]

    - name: Configure IPv6 DHCP client  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ipv6 dhcp-client
        data: "{{ mt_ipv6_dhcp_client }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_ipv6_dhcp_client | default([])
      tags: ["ipv6", "dhcp"]

    - name: Configure IPv6 firewall mangle  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ipv6 firewall mangle
        data: "{{ mt_firewall_mangle_ipv6 }}"
        ensure_order: true
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_firewall_mangle_ipv6 | default([])
      tags: ["firewall", "ipv6", "mangle"]

    - name: Configure IPv6 firewall lists  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ipv6 firewall address-list
        data: "{{ mt_firewall_address_lists_ipv6 }}"
        ensure_order: true
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_firewall_address_lists_ipv6 | default([])
      tags: ["firewall", "ipv6", "lists"]

    - name: Configure IPv6 firewall filters  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ipv6 firewall filter
        data: "{{ mt_firewall_rules_ipv6 }}"
        ensure_order: true
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_firewall_rules_ipv6 | default([])
      tags: ["firewall", "ipv6", "filter"]

    - name: Configure IPv6 firewall NAT  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ipv6 firewall nat
        data: "{{ mt_firewall_nat_ipv6 }}"
        ensure_order: true
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_firewall_nat_ipv6 | default([])
      tags: ["firewall", "ipv6", "nat"]

    - name: Configure IPv6 firewall raw  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ipv6 firewall raw
        data: "{{ mt_firewall_raw_ipv6 }}"
        ensure_order: true
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_firewall_raw_ipv6 | default([])
      tags: ["firewall", "ipv6", "raw"]

    - name: Get IPv6 DHCP info  # noqa args[module]
      community.routeros.api_info:
        path: ipv6 dhcp-client
        unfiltered: true
        handle_disabled: omit
      when: mt_ipv6_dhcp_client | default([])
      register: __ipv6_dhcp_info
      tags: ["ipv6", "address"]

    - name: Set fact for mt_wan_ipv6_pool
      ansible.builtin.set_fact:
        # "prefix": "2a01:...::/56, 4h44m33s"
        mt_wan_ipv6_pool: "{{ (__ipv6_dhcp_info.result | selectattr('pool-name', 'eq', mt_ipv6_dhcp_client[0]['pool-name']) | first).prefix.split(',', 1)[0] }}"
      when:
        - mt_ipv6_dhcp_client | default([])
        - __ipv6_dhcp_info.result | selectattr('pool-name', 'eq', mt_ipv6_dhcp_client[0]['pool-name'])
      tags: ["ipv6", "address"]

    - name: Configure IPv6 addresses  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ipv6 address
        data: "{{ mt_ipv6_addresses | default([]) }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      tags: ["ipv6", "address"]

    - name: Configure logging actions  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: system logging action
        data: "{{ mt_logging_actions }}"
        # Don't remove defaults
      when: mt_logging_actions | default([])
      tags: ["logging", "action"]

    - name: Configure logging  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: system logging
        data: "{{ mt_logging }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_logging | default([])
      tags: ["logging"]

    - name: Configure IPv4 DNS settings  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip dns
        data: "{{ mt_dns_settings }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_dns_settings | default([])
      tags: ["dns"]

    - name: Configure DNS entries
      tags: ["dns"]
      # Ugly, consider using inventory
      when: inventory_hostname == "rb5009"
      block:
        - name: Get all DNS entries  # noqa args[module]
          delegate_to: localhost
          community.routeros.api_info:
            path: ip dns static
            handle_disabled: null-value
          register: __mt_dns

        - name: Get add, update, remove lists  # noqa args[module] - it thinks api_info's 'result' is a string
          andrei.utils.mt_get_dns_entries:
            existing: "{{ __mt_dns.result }}"
            data: "{{ mt_dns_entries }}"
            comment_regex: "{{ mt_dns_comment_regex | default(omit, true) }}"
            exclude_comment_regex: "{{ mt_dns_exclude_comment_regex | default(omit, true) }}"
          register: __dns_lists

        - name: Add missing entries  # noqa args[module]
          delegate_to: localhost
          community.routeros.api_modify:
            path: ip dns static
            data: "{{ __dns_lists.to_add }}"

        - name: Delete old DNS entries  # noqa args[module]
          delegate_to: localhost
          community.routeros.api:
            path: ip dns static
            remove: "{{ item['.id'] }}"
          loop: "{{ __dns_lists.to_remove }}"
          loop_control:
            label: "{{ item.name | default(item.regexp) }}"

        - name: Update DNS entries  # noqa args[module]
          delegate_to: localhost
          community.routeros.api_find_and_modify:
            path: ip dns static
            find:
              ".id": "{{ item['.id'] }}"
            values: "{{ item }}"
            require_matches_min: 1
            require_matches_max: 1
          loop: "{{ __dns_lists.to_update }}"
          loop_control:
            label: "{{ item.name | default(item.regexp) }}"

  handlers:
    - name: Apply admin allowed-ips
      community.routeros.command:
        commands:
          - "/user set [find name={{ ansible_user }}] {{ user_args | community.routeros.join }}"
      vars:
        user_args:
          - "address={{ mt_admin_allowed_addresses | join(',') | community.routeros.quote_argument_value }}"
      # Bug in community.routeros
      when: not ansible_check_mode
