#!/usr/bin/env -S ansible-playbook
---

- name: Configure using SSH
  hosts: mikrotik
  gather_facts: false
  vars:
    p12_path: "/tmp/{{ inventory_hostname }}.p12"
  roles:
    - role: ownca
      when: "'generate' in ansible_run_tags"
      tags: ["generate"]

  tasks:
    - name: Configure groups
      community.routeros.command:
        commands:
          - >
            :if ([/user group find name={{ item.name }}]) do={
              /user group set [find name={{ item.name }}] {{ item.args | community.routeros.join }}
            } else={
              /user group add name={{ item.name }} {{ item.args | community.routeros.join }}
            }
          - /user group print
        wait_for: result[1] contains {{ item.name }}
      loop: "{{ mt_groups | default([]) }}"
      loop_control:
        label: "{{ item.name }}"
      tags: ["groups"]

    - name: Configure users
      community.routeros.command:
        commands:
          - >
            :if ([/user find name={{ item.name }}]) do={
              /user set [find name={{ item.name }}] {{ item.args | community.routeros.join }}
            } else={
              /user add name={{ item.name }} {{ item.args | community.routeros.join }}
            }
          - /user print
        wait_for: result[1] contains {{ item.name }}
      loop: "{{ mt_users | default([]) }}"
      loop_control:
        label: "{{ item.name }}"
      tags: ["users"]

  post_tasks:
    - name: Generate and copy bundle
      tags: ["tls-setup"]
      when: "'tls-setup' in ansible_run_tags"
      block:
        - name: Generate random password
          ansible.builtin.set_fact:
            random_password: "{{ lookup('community.general.random_string', length=32, override_all='0123456789abcdefghijklmnopqrstuvwxyz') }}"

        - name: Create PKCS#12 bundle
          delegate_to: localhost
          community.crypto.openssl_pkcs12:
            path: "{{ p12_path }}"
            certificate_path: "{{ ownca_cert_list[0].publickey_path }}"
            privatekey_passphrase: "{{ key_passphrase }}"
            privatekey_content: "{{ lookup('file', ownca_cert_list[0].privatekey_path) }}"
            friendly_name: '{{ inventory_hostname }}'
            passphrase: "{{ random_password }}"
            mode: "0600"

        - name: Copy router certificate onto router
          ansible.netcommon.net_put:
            src: "{{ p12_path }}"
            dest: "{{ inventory_hostname }}.p12"

        - name: Install router certificate and clean up
          community.routeros.command:
            commands:
              # Import certificate:
              - /certificate import name={{ inventory_hostname }} file-name={{ inventory_hostname }}.p12 passphrase="{{ random_password }}"
              # Remove PKCS12 bundle:
              - /file remove {{ inventory_hostname }}.p12
              # Show certificates
              - /certificate print
          register: output

      always:
        - name: Delete PKCS12 bundle
          delegate_to: localhost
          ansible.builtin.file:
            path: "{{ p12_path }}"
            state: absent

    - name: Use certificate
      community.routeros.command:
        commands:
          - /ip service set www-ssl certificate={{ inventory_hostname }} tls-version=only-1.2
          - /ip service set api-ssl certificate={{ inventory_hostname }} disabled=no tls-version=only-1.2
      tags: ["tls-setup"]
      when: "'tls-setup' in ansible_run_tags"

- name: Configure using API
  hosts: mikrotik
  gather_facts: false
  module_defaults:
    group/community.routeros.api:
      hostname: "{{ ansible_host }}"
      username: "{{ api_username }}"
      password: "{{ api_password }}"
      tls: true
      validate_certs: true
      validate_cert_hostname: true
      ca_path: "{{ ca_publickey_path }}"

  tasks:
    - name: Create bridges  # noqa args[module]
      community.routeros.api_modify:
        path: interface bridge
        data:
          - name: "{{ item.name }}"
      loop: "{{ mt_bridges }}"
      loop_control:
        label: "{{ item.name }}"
      when: mt_bridges | default([])
      tags: ["interfaces", "bridge"]

    - name: Configure bonds  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: interface bonding
        data: "{{ mt_bonds }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      when: mt_bonds | default([])
      tags: ["interfaces", "bond"]

    - name: Include VLAN role
      ansible.builtin.include_role:
        name: mt_vlans
        apply:
          tags: ["interfaces", "vlan"]
      vars:
        mt_networks: "{{ all_net }}"
        mt_bridge_name: "{{ mt_bridges[0].name }}"
      tags: ["interfaces", "vlan"]
      when: mt_trunk_ports | default([]) or
            mt_access_ports | default([])

    - name: Enable VLAN filtering [legacy]  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_find_and_modify:
        path: interface ethernet switch
        find: {}
        values:
          drop-if-invalid-or-src-port-not-member-of-vlan-on-ports: "{{ mt_bridge_ports | join(',') }}"
      tags: ["interfaces", "bridge"]
      when:
        - mt_bridges | default([])
        - mt_bridge_ports | default([])
        - mt_vlan_legacy | default(false)

    - name: Enable VLAN filtering [modern]  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: interface bridge
        data: "{{ mt_bridges }}"
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
      tags: ["interfaces", "bridge"]
      when:
        - mt_bridges | default([])
        - not mt_vlan_legacy | default(false)

    - name: Configure BGP
      delegate_to: localhost
      tags: ["bgp"]
      when: mt_bgp_peers | default([])
      block:
        - name: Get BGP peers  # noqa args[module]
          check_mode: false
          community.routeros.api:
            path: routing bgp connection
          register: __bgp_peers

        - name: Remove extra peers  # noqa args[module]
          community.routeros.api:
            path: routing bgp connection
            remove: "{{ item['.id'] }}"
          loop: "{{ __bgp_peers.msg }}"
          loop_control:
            label: "{{ item.name }}"
          when: item.name not in mt_bgp_peers | map(attribute='name')

        - name: Add missing peers  # noqa args[module]
          community.routeros.api:
            path: routing bgp connection
            add: >-
              as={{ item.as }}
              local.role={{ item.local_role }}
              name={{ item.name }}
              remote.address={{ item.remote_address }}
          loop: "{{ mt_bgp_peers }}"
          loop_control:
            label: "{{ item.name }}"
          when: item.name not in __bgp_peers.msg | map(attribute='name')

        - name: Update outdated peers  # noqa args[module]
          vars:
            old: "{{ __bgp_peers.msg | selectattr('name', 'eq', item.name) | first }}"
          community.routeros.api:
            path: routing bgp connection
            update: >-
              .id={{ old['.id'] }}
              as={{ item.as }}
              local.role={{ item.local_role }}
              name={{ item.name }}
              remote.address={{ item.remote_address }}
          loop: "{{ mt_bgp_peers }}"
          loop_control:
            label: "{{ item.name }}"
          when:
            - item.name in __bgp_peers.msg | map(attribute='name')
            - item.as | string != old['as'] | string or
              item.local_role != old['local.role'] or
              item.remote_address != old['remote.address']

    - name: Configure services  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: ip service
        data: "{{ mt_services }}"
      tags: ["services"]

    - name: Configure wireguard interfaces  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: interface wireguard
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
        data: "{{ mt_wg_interfaces }}"
      when: mt_wg_interfaces | default([])
      tags: ["interfaces", "wg",]

    - name: Configure wireguard peers  # noqa args[module]
      delegate_to: localhost
      community.routeros.api_modify:
        path: interface wireguard peers
        handle_absent_entries: remove
        handle_entries_content: remove_as_much_as_possible
        data: "{{ mt_wg_peers }}"
      when: mt_wg_peers | default([])
      tags: ["wg", "peers"]

    - name: Configure DNS
      tags: ["dns"]
      block:
        - name: Get all DNS entries  # noqa args[module]
          delegate_to: localhost
          community.routeros.api_info:
            path: ip dns static
            handle_disabled: null-value
          register: __mt_dns

        - name: Get add, update, remove lists  # noqa args[module] - it thinks api_info's 'result' is a string
          mt_get_dns_entries:
            existing: "{{ __mt_dns.result }}"
            data: "{{ mt_dns_entries }}"
            exclude_comment_regex: "^dhcp-.*"
          register: __dns_lists

        - name: Add missing entries  # noqa args[module]
          delegate_to: localhost
          community.routeros.api_modify:
            path: ip dns static
            data: "{{ __dns_lists.to_add }}"

        - name: Delete old DNS entries  # noqa args[module]
          delegate_to: localhost
          community.routeros.api:
            path: ip dns static
            remove: "{{ item['.id'] }}"
          loop: "{{ __dns_lists.to_remove }}"
          loop_control:
            label: "{{ item.name | default(item.regexp) }}"

        - name: Update DNS entries  # noqa args[module]
          delegate_to: localhost
          community.routeros.api_find_and_modify:
            path: ip dns static
            find:
              ".id": "{{ item['.id'] }}"
            values: "{{ item }}"
            require_matches_min: 1
            require_matches_max: 1
          loop: "{{ __dns_lists.to_update }}"
          loop_control:
            label: "{{ item.name | default(item.regexp) }}"
