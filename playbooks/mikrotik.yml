#!/usr/bin/env -S ansible-playbook
---

- name: MikroTik certificate setup
  hosts: mikrotik
  gather_facts: false
  tags: ["tls-setup"]
  vars:
    p12_path: "/tmp/{{ inventory_hostname }}.p12"
  roles:
    - role: self_signed_cert
      when: "'tls-setup' in ansible_run_tags"
      tags: ["generate"]

  post_tasks:
    - name: Generate and copy bundle
      when: "'tls-setup' in ansible_run_tags"
      block:
        - name: Generate random password
          ansible.builtin.set_fact:
            random_password: "{{ lookup('community.general.random_string', length=32, override_all='0123456789abcdefghijklmnopqrstuvwxyz') }}"

        - name: Create PKCS#12 bundle
          delegate_to: localhost
          community.crypto.openssl_pkcs12:
            path: "{{ p12_path }}"
            certificate_path: "{{ self_signed_certs[0].publickey_path }}"
            privatekey_passphrase: "{{ key_passphrase }}"
            privatekey_content: "{{ lookup('file', self_signed_certs[0].privatekey_path) }}"
            friendly_name: '{{ inventory_hostname }}'
            passphrase: "{{ random_password }}"
            mode: "0600"

        - name: Copy router certificate onto router
          ansible.netcommon.net_put:
            src: "{{ p12_path }}"
            dest: "{{ inventory_hostname }}.p12"

        - name: Install router certificate and clean up
          community.routeros.command:
            commands:
              # Import certificate:
              - /certificate import name={{ inventory_hostname }} file-name={{ inventory_hostname }}.p12 passphrase="{{ random_password }}"
              # Remove PKCS12 bundle:
              - /file remove {{ inventory_hostname }}.p12
              # Show certificates
              - /certificate print
          register: output

      always:
        - name: Delete PKCS12 bundle
          delegate_to: localhost
          ansible.builtin.file:
            path: "{{ p12_path }}"
            state: absent

    - name: Use certificate
      community.routeros.command:
        commands:
          - /ip service set www-ssl certificate={{ inventory_hostname }} tls-version=only-1.2
          - /ip service set api-ssl certificate={{ inventory_hostname }} tls-version=only-1.2

- name: MikroTik playbook
  hosts: mikrotik
  gather_facts: false
  tags: ["dns"]
  module_defaults:
    group/community.routeros.api:
      hostname: "{{ ansible_host }}"
      username: "{{ api_username }}"
      password: "{{ api_password }}"
      tls: true
      validate_certs: true
      validate_cert_hostname: true
      ca_path: "{{ ca_publickey_path }}"

  tasks:
    - name: Get all DNS entries
      delegate_to: localhost
      community.routeros.api_info:
        path: ip dns static
        handle_disabled: null-value
      register: __mt_dns

    - name: Set fact for managed entries
      ansible.builtin.set_fact:
        mt_dns_present: "{{ __mt_dns.result | selectattr('comment', 'eq', mt_dns_managed_comment) | list }}"

    - name: Set helper facts
      ansible.builtin.set_fact:
        __configured_hosts: "{{ mt_dns_entries | map(attribute='name') | list }}"
        __present_hosts: "{{ mt_dns_present | map(attribute='name') | list }}"

    - name: Remove old entries
      delegate_to: localhost
      vars:
        __delete_entries: >-
          {%- set tmp = [] -%}
          {%- for item in mt_dns_present -%}
          {%- if item.name not in __configured_hosts -%}
          {{- tmp.append(item) -}}
          {%- endif -%}
          {%- endfor -%}
          {{ tmp }}
      community.routeros.api:
        path: ip dns static
        remove: "{{ item['.id'] }}"
      loop: "{{ __delete_entries }}"
      loop_control:
        label: "{{ item.name }} [{{ item.address }}]"

    - name: Add missing entries
      delegate_to: localhost
      vars:
        __missing_entries: >-
          {%- set tmp = [] -%}
          {%- for item in mt_dns_entries -%}
          {%- if item.name not in __present_hosts -%}
          {{- tmp.append(item) -}}
          {%- endif -%}
          {%- endfor -%}
          {{ tmp }}
      community.routeros.api_modify:
        path: ip dns static
        data: "{{ __missing_entries }}"

    - name: Update entries
      delegate_to: localhost
      vars:
        __same_entries: >-
          {%- set tmp = [] -%}
          {%- for item in mt_dns_entries -%}
          {%- if item.name in __present_hosts -%}
          {{- tmp.append(item) -}}
          {%- endif -%}
          {%- endfor -%}
          {{ tmp }}
      community.routeros.api_find_and_modify:
        path: ip dns static
        find:
          name: "{{ item.name }}"
          comment: "{{ item.comment | default(mt_dns_managed_comment) }}"
        values: "{{ item }}"
      loop: "{{ __same_entries }}"
      loop_control:
        label: "{{ item.name }} [{{ item.address }}]"
