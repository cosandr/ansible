#!/usr/bin/env -S ansible-playbook
---
- name: Laptop playbook
  gather_facts: true
  hosts: laptop
  pre_tasks:
    - name: Check if GDM is active  # noqa command-instead-of-module
      command: systemctl is-active -q gdm.service
      check_mode: false
      changed_when: false
      failed_when: false
      register: __gdm_active
      tags: ["always"]

    - name: Check if SDDM is active  # noqa command-instead-of-module
      command: systemctl is-active -q sddm.service
      check_mode: false
      changed_when: false
      failed_when: false
      register: __sddm_active
      tags: ["always"]

    - name: Set desktop_environment to GNOME
      set_fact:
        desktop_environment: "gnome"
        kernel_params: "root=/dev/mapper/root rw rootflags=subvol=arch_gnome/@ resume=/dev/mapper/root resume_offset=37889341 {{ extra_kernel_params }}"
        mkinitcpio_kernels:
          - name: linux
            label: "Arch GNOME"
          - name: linux-lts
            label: "Arch GNOME LTS"
      when: __gdm_active.rc == 0
      tags: ["always"]

    - name: Set desktop_environment to KDE
      set_fact:
        desktop_environment: "kde"
        kernel_params: "root=/dev/mapper/root rw rootflags=subvol=arch_kde/@ {{ extra_kernel_params }}"
        mkinitcpio_kernels:
          - name: linux
            label: "Arch KDE"
          - name: linux-lts
            label: "Arch KDE LTS"
      when: __sddm_active.rc == 0
      tags: ["always"]

    - name: Install packages (pacman)
      pacman:
        name: "{{ pacman_packages }}"
        state: present
      when: ansible_distribution == 'Archlinux'
      tags: ["pacman"]
  tasks:
    - name: Enable resume dracut module
      become: true
      copy:
        dest: /etc/dracut.conf.d/resume.conf
        owner: root
        group: root
        mode: 0644
        content: |
          add_dracutmodules+=" resume "
      when: ansible_os_family == 'RedHat'
      notify: dracut regenerate
      tags: ["hibernate"]

    - name: Install i3 packages (pacman)
      pacman:
        name: "{{ pacman_i3_packages }}"
        state: present
      when:
        - ansible_distribution == 'Archlinux'
        - desktop_environment in ["i3", "sway"]
      tags: ["i3"]

    - name: Install sway packages (pacman)
      pacman:
        name: "{{ pacman_sway_packages }}"
        state: present
      when:
        - ansible_distribution == 'Archlinux'
        - desktop_environment == "sway"
      tags: ["sway"]

    - block:
        - name: Ensure bluetooth is enabled
          systemd:
            name: bluetooth.service
            state: started
            enabled: true

        - name: Enable bluetooth auto power on
          lineinfile:
            path: '/etc/bluetooth/main.conf'
            regexp: '^#?AutoEnable'
            line: 'AutoEnable=true'

        - name: Ensure pipewire config dir exists
          file:
            path: "/etc/pipewire/media-session.d"
            state: directory
            owner: root
            group: root
            mode: 0755

        - name: Copy default config
          copy:
            src: "/usr/share/pipewire/media-session.d/bluez-monitor.conf"
            dest: "/etc/pipewire/media-session.d/bluez-monitor.conf"
            owner: root
            group: root
            mode: 0644
            force: false
          tags: ["pipewire"]

        - name: Enable profile auto-switch
          lineinfile:
            path: "/etc/pipewire/media-session.d/bluez-monitor.conf"
            backrefs: true
            regexp: '^(\s+)bluez5\.autoswitch-profile'
            line: '\1bluez5.autoswitch-profile = true'
          tags: ["pipewire"]

      tags: ["bluetooth"]

  handlers:
    - name: dracut regenerate
      become: true
      command: dracut -f --regenerate-all
  roles:
    - role: laptop
      tags: ["laptop"]

    - role: arch-common
      when: ansible_distribution == 'Archlinux'
      tags: ["arch-common"]

    - role: firewall_config
      tags: ["firewall"]

    - role: borg
      tags: ["borg"]

    - role: reflector
      when: ansible_distribution == 'Archlinux'
      tags: ["reflector"]

    - role: locale_conf
      when: ansible_os_family != 'RedHat'
      tags: ["locale"]

    - role: sudo
      tags: ["sudo"]

    - role: hostname
      tags: ["hostname"]

    - role: systemd_networkd
      when: network_manager == "systemd-networkd"
      tags: ["systemd-networkd"]

    - role: chezmoi
      tags: ["chezmoi"]

    - role: sbctl
      when: ansible_distribution == 'Archlinux'
      tags: ["sbctl"]

    - role: mkinitcpio
      when: ansible_distribution == 'Archlinux'
      tags: ["mkinitcpio"]

    - role: paru
      vars:
        aur_name: paru-bin
      when: ansible_distribution == 'Archlinux'
      tags: ["paru"]

    - role: spotify
      tags: ["spotify"]

    - role: discord
      tags: ["discord"]

    - role: vscode
      tags: ["vscode"]

    - role: ufw
      when: ansible_os_family == 'Debian'
      tags: ["ufw"]

    - role: install_aur
      vars:
        # No idea why this is needed
        aur_packages: "{{ hostvars[inventory_hostname].aur_packages }}"
      when: ansible_distribution == 'Archlinux'
      tags: ["aur"]

    - role: sshd
      tags: ["sshd"]

    - role: sudo
      tags: ["sudo"]

    - role: pipewire
      tags: ["pipewire"]

    - role: google-chrome
      tags: ["google-chrome"]

    - role: tlp
      when: desktop_environment in ["i3", "sway"]
      tags: ["tlp"]

    # - role: xss-lock
    #   tags: ["xss-lock"]

    - role: xorg
      when:
        - desktop_environment == "i3"
      tags: ["xorg"]

    - role: xidlehook
      when:
        - ansible_distribution == 'Archlinux'
        - desktop_environment == "i3"
      tags: ["xidlehook"]

    - role: gnome
      when:
        - ansible_distribution == 'Archlinux'
        - desktop_environment == "gnome"
      tags: ["gnome"]

    - role: gnome-keyring
      tags: ["gnome-keyring"]

    # - role: thinkfan
    #   tags: ["thinkfan"]

    - role: udev
      tags: ["udev"]

    - role: ddcutil
      tags: ["ddcutil"]

    - role: install_aur
      vars:
        aur_packages: "{{ aur_i3_packages }}"
      when:
        - ansible_distribution == 'Archlinux'
        - desktop_environment in ["i3", "sway"]
      tags: ["i3"]

    - role: install_aur
      vars:
        aur_packages: "{{ aur_sway_packages }}"
      when:
        - ansible_distribution == 'Archlinux'
        - desktop_environment == "sway"
      tags: ["sway"]

    - role: aisbergg.snapper
      tags: ["snapper"]

    - role: node_exporter
      vars:
        node_exporter_skip_install: false
        node_exporter_version: "latest"
        node_exporter_collectors: []
      tags: ["prometheus-stack", "node_exporter"]

  post_tasks:
    - name: Configure user groups
      user:
        name: "{{ my_user }}"
        groups: "{{ my_groups }}"
        append: true
      tags: ["groups"]
