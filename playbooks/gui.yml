#!/usr/bin/env -S ansible-playbook
---

- name: GUI playbook
  gather_facts: true
  hosts: gui
  pre_tasks:
    - name: End host if Mac
      ansible.builtin.meta: end_host
      when: ansible_distribution == "MacOSX"
      tags: ["always"]

    - name: Check if GDM is active  # noqa command-instead-of-module
      ansible.builtin.command: systemctl is-active -q gdm.service
      check_mode: false
      changed_when: false
      failed_when: false
      register: __gdm_active
      tags: ["always"]

    - name: Check if SDDM is active  # noqa command-instead-of-module
      ansible.builtin.command: systemctl is-active -q sddm.service
      check_mode: false
      changed_when: false
      failed_when: false
      register: __sddm_active
      tags: ["always"]

    - name: Set desktop_environment to GNOME
      ansible.builtin.set_fact:
        desktop_environment: "gnome"
        mkinitcpio_kernels:
          - name: linux
            label: "Arch GNOME"
          - name: linux-lts
            label: "Arch GNOME LTS"
      when: __gdm_active.rc == 0
      tags: ["always"]

    - name: Set desktop_environment to KDE
      ansible.builtin.set_fact:
        desktop_environment: "kde"
        mkinitcpio_kernels:
          - name: linux
            label: "Arch KDE"
          - name: linux-lts
            label: "Arch KDE LTS"
      when: __sddm_active.rc == 0
      tags: ["always"]

    - name: Install packages (pacman)
      become: true
      community.general.pacman:
        name: "{{ pacman_packages }}"
        state: present
      when: ansible_distribution == 'Archlinux'
      tags: ["pacman"]
  tasks:
    - name: Enable resume dracut module
      become: true
      ansible.builtin.copy:
        dest: /etc/dracut.conf.d/resume.conf
        owner: root
        group: root
        mode: "0644"
        content: |
          add_dracutmodules+=" resume "
      when:
        - "'laptops' in group_names"
        - ansible_os_family == 'RedHat'
      notify: Dracut regenerate
      tags: ["hibernate"]

    - name: Install i3 packages (pacman)
      become: true
      community.general.pacman:
        name: "{{ pacman_i3_packages }}"
        state: present
      when:
        - ansible_distribution == 'Archlinux'
        - desktop_environment in ["i3", "sway"]
      tags: ["i3"]

    - name: Install sway packages (pacman)
      become: true
      community.general.pacman:
        name: "{{ pacman_sway_packages }}"
        state: present
      when:
        - ansible_distribution == 'Archlinux'
        - desktop_environment == "sway"
      tags: ["sway"]

    - name: Install i3 packages (pip)
      become: true
      become_user: "{{ my_user }}"
      ansible.builtin.pip:
        name: "{{ pip_i3_packages }}"
        state: present
        extra_args: "--user"
      when:
        - desktop_environment in ["i3", "sway"]
      tags: ["i3", "pip"]

    - name: Configure bluetooth
      when:
        - "'laptops' in group_names"
      tags: ["bluetooth"]
      block:
        - name: Ensure bluetooth is enabled
          become: true
          ansible.builtin.systemd:
            name: bluetooth.service
            state: started
            enabled: true

        - name: Enable bluetooth auto power on
          become: true
          ansible.builtin.lineinfile:
            path: '/etc/bluetooth/main.conf'
            regexp: '^#?AutoEnable'
            line: 'AutoEnable=true'

        # Required to get battery level reporting
        # https://wiki.archlinux.org/title/Bluetooth_headset#Battery_level_reporting
        - name: Enable bluetooth experimental
          become: true
          ansible.builtin.lineinfile:
            path: '/etc/bluetooth/main.conf'
            regexp: '^#?Experimental'
            line: 'Experimental = true'
          notify: Restart bluetooth

    # https://wiki.archlinux.org/title/Fwupd#Setup_for_UEFI_upgrade
    - name: Configure fwupd
      become: true
      tags: ["fwupd"]
      block:
        - name: Ensure fwupd packages are installed
          ansible.builtin.package:
            name:
              - fwupd
              - udisks2
            state: present

        - name: Disable shim
          ansible.builtin.lineinfile:
            path: /etc/fwupd/uefi_capsule.conf
            regexp: '^#?DisableShimForSecureBoot'
            line: DisableShimForSecureBoot=true
          notify: Restart fwupd

        - name: Ensure fwupd service is running
          ansible.builtin.systemd:
            name: fwupd.service
            state: started
            enabled: true

        # Ensure this file is enrolled in sbctl
        # manually: sbctl sign -s /usr/lib/fwupd/efi/fwupdx64.efi.signed
        # ansible: add to sbctl_sign_files
        - name: Ensure signed file exists
          ansible.builtin.copy:
            src: /usr/lib/fwupd/efi/fwupdx64.efi
            dest: /usr/lib/fwupd/efi/fwupdx64.efi.signed
            owner: root
            group: root
            mode: "0644"
            remote_src: true
            force: false

    - name: Configure /etc/resolv.conf
      ansible.builtin.copy:
        content: "{{ resolv_config }}"
        dest: /etc/resolv.conf
        owner: root
        group: root
        mode: "0644"
        follow: false
      when: resolv_config | default('')
      tags: ["resolv"]

  handlers:
    - name: Dracut regenerate  # noqa no-changed-when
      become: true
      ansible.builtin.command: dracut -f --regenerate-all

    - name: Restart fwupd
      become: true
      ansible.builtin.systemd:
        name: fwupd.service
        state: restarted

    - name: Restart bluetooth
      become: true
      ansible.builtin.systemd:
        name: bluetooth.service
        state: restarted

  roles:
    - role: laptop
      when: "'laptops' in group_names"
      tags: ["laptop"]

    - role: arch-common
      when: ansible_distribution == 'Archlinux'
      tags: ["arch-common"]

    - role: firewall_config
      tags: ["firewall"]

    - role: reflector
      when: ansible_distribution == 'Archlinux'
      tags: ["reflector"]

    - role: locale_conf
      when: ansible_os_family != 'RedHat'
      tags: ["locale"]

    - role: sudo
      tags: ["sudo"]

    - role: hostname
      tags: ["hostname"]

    - role: systemd_networkd
      when: network_manager == "systemd-networkd"
      tags: ["networkd"]

    - role: chezmoi
      tags: ["chezmoi"]

    - role: sbctl
      when: ansible_distribution == 'Archlinux'
      tags: ["sbctl"]

    - role: mkinitcpio
      when: ansible_distribution == 'Archlinux'
      tags: ["mkinitcpio"]

    - role: paru
      vars:
        aur_name: paru-bin
      when: ansible_distribution == 'Archlinux'
      tags: ["paru"]

    - role: spotify
      tags: ["spotify"]

    - role: discord
      tags: ["discord"]

    - role: vscode
      tags: ["vscode"]

    - role: install_aur
      vars:
        # No idea why this is needed
        aur_packages: "{{ hostvars[inventory_hostname].aur_packages }}"
      when: ansible_distribution == 'Archlinux'
      tags: ["aur"]

    - role: sshd
      tags: ["sshd"]

    - role: sudo
      tags: ["sudo"]

    - role: pipewire
      tags: ["pipewire"]

    - role: google-chrome
      when: "'laptops' in group_names"
      tags: ["google-chrome"]

    - role: tlp
      when:
        - "'laptops' in group_names"
        - desktop_environment in ["i3", "sway"]
      tags: ["tlp"]

    - role: cups
      when:
        - "'laptops' in group_names"
        - ansible_distribution == 'Archlinux'
      tags: ["cups"]

    - role: xorg
      when:
        - desktop_environment == "i3"
      tags: ["xorg"]

    - role: xidlehook
      when:
        - ansible_distribution == 'Archlinux'
        - desktop_environment == "i3"
      tags: ["xidlehook"]

    - role: autorandr
      when: desktop_environment in ["i3", "sway"]
      tags: ["autorandr"]

    - role: gnome
      when:
        - ansible_distribution == 'Archlinux'
        - desktop_environment == "gnome"
      tags: ["gnome"]

    - role: gnome-keyring
      tags: ["gnome-keyring"]

    - role: udev
      tags: ["udev"]

    - role: ddcutil
      tags: ["ddcutil"]

    - role: install_aur
      vars:
        aur_packages: "{{ aur_i3_packages }}"
      when:
        - ansible_distribution == 'Archlinux'
        - desktop_environment in ["i3", "sway"]
      tags: ["i3"]

    - role: install_aur
      vars:
        aur_packages: "{{ aur_sway_packages }}"
      when:
        - ansible_distribution == 'Archlinux'
        - desktop_environment == "sway"
      tags: ["sway"]

    - role: setup_kde
      when: desktop_environment == "kde"
      tags: ["kde"]

    - role: aisbergg.snapper
      become: true
      when: snapper_configs | default([])
      tags: ["snapper"]

    - role: btrbk
      become: true
      when: btrbk_volumes | default([])
      tags: ["btrbk"]

    - role: node_exporter
      become: true
      tags: ["prometheus-stack", "node_exporter"]

  post_tasks:
    - name: Configure user groups
      become: true
      ansible.builtin.user:
        name: "{{ my_user }}"
        groups: "{{ my_groups }}"
        append: true
      tags: ["groups"]
