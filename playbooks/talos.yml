#!/usr/bin/env -S ansible-playbook
---

# https://www.talos.dev/v1.5/reference/configuration/

- name: Setup Talos
  hosts: talos
  become: false
  gather_facts: false
  vars:
    tmp_dir: "/tmp/talos-config"
    ansible_connection: local
    force: false
  tags: ["system"]
  pre_tasks:
    - name: Reset tasks
      tags: ["reset"]
      when: "'reset' in ansible_run_tags"
      block:
        - name: Mount boot disk  # noqa no-changed-when - Output is the same
          delegate_to: "{{ vm_host }}"
          vars:
            ansible_connection: ssh
          ansible.builtin.command:
            cmd: "virsh change-media {{ inventory_hostname }} vdc /var/lib/libvirt/images/talos-boot.iso --config --live"

        - name: Reset node  # noqa no-changed-when - Always changed
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: "talosctl -n {{ ansible_host }} reset --graceful=false --wait=false --reboot"
          environment:
            TALOSCONFIG: "{{ tmp_dir }}/talosconfig"

        # Wait flag hangs, this is is much more reliable
        - name: Wait until node is up
          check_mode: false
          changed_when: false
          failed_when: false
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: "talosctl -n {{ ansible_host }} disks --insecure"
          until: __wait.rc == 0
          retries: 20
          delay: 5
          register: __wait

        - name: End host
          ansible.builtin.meta: end_host
  tasks:
    - name: Download Talos ISO
      delegate_to: "{{ vm_host }}"
      ansible.builtin.get_url:
        url: "https://factory.talos.dev/image/{{ talos_schematic }}/v{{ talos_version }}/metal-amd64.iso"
        dest: "/var/lib/libvirt/images/talos-boot.iso"
        owner: root
        group: root
        mode: "0644"
      vars:
        ansible_connection: ssh
      tags: ["download"]
      when: "'download' in ansible_run_tags"

    - name: Create temporary Talos config dir
      run_once: true
      ansible.builtin.file:
        path: "{{ tmp_dir }}"
        state: directory
        mode: "0750"
      tags: ["config", "host"]

    - name: Copy secrets
      run_once: true
      ansible.builtin.copy:
        src: "{{ repo_base_dir }}/files/talos/secrets_vault.yml"
        dest: "{{ tmp_dir }}/secrets.yaml"
        mode: "0640"
      tags: ["config"]

    - name: Copy config patch
      run_once: true
      ansible.builtin.template:
        src: "{{ repo_base_dir }}/files/talos/gen-config-patch.yaml.j2"
        dest: "{{ tmp_dir }}/all.yaml"
        mode: "0640"
      tags: ["config"]

    - name: Generate Talos config
      run_once: true
      ansible.builtin.command:
        chdir: "{{ tmp_dir }}"
        creates: "{{ force | bool | ternary(omit, tmp_dir + '/controlplane.yaml') }}"
        cmd: >-
          talosctl gen config "{{ kube_api_server }}" "https://{{ kube_api_server }}:6443"
            {% if force | bool %}
            --force
            {% endif %}
            --kubernetes-version {{ kube_version }}
            --additional-sans="{{ vips.vm.talos_cp | join(',') }}"
            --with-docs=false
            --with-examples=false
            --with-secrets secrets.yaml
            --config-patch @all.yaml
      tags: ["config"]

    - name: Configure endpoints  # noqa no-changed-when - no output
      run_once: true
      ansible.builtin.command:
        chdir: "{{ tmp_dir }}"
        cmd: "talosctl config endpoint {{ groups['talos_cp'] | map('extract', hostvars, 'ansible_host') | join(' ') }}"
      environment:
        TALOSCONFIG: "{{ tmp_dir }}/talosconfig"
      tags: ["config"]

    - name: Copy host patches
      ansible.builtin.template:
        src: "{{ repo_base_dir }}/files/talos/{{ patch_file }}"
        dest: "{{ tmp_dir }}/{{ inventory_hostname }}-patch.yaml"
        mode: "0640"
      vars:
        patch_file: "{{ ('talos_cp' in group_names) | ternary('cp-patch.yaml.j2', 'worker-patch.yaml.j2') }}"
      tags: ["host"]

    - name: Generate host configs
      ansible.builtin.command:
        chdir: "{{ tmp_dir }}"
        creates: "{{ force | bool | ternary(omit, '{{ tmp_dir }}/{{ inventory_hostname }}.yaml') }}"
        cmd: >-
          talosctl machineconfig patch {{ src_file }}.yaml
            --patch @{{ inventory_hostname }}-patch.yaml
            -o {{ inventory_hostname }}.yaml
      vars:
        src_file: "{{ ('talos_cp' in group_names) | ternary('controlplane', 'worker') }}"
      tags: ["host"]

    - name: Check if cluster is bootstrapped
      check_mode: false
      changed_when: false
      failed_when: false
      ansible.builtin.command:
        chdir: "{{ tmp_dir }}"
        cmd: "talosctl -n {{ ansible_host }} etcd status"
      environment:
        TALOSCONFIG: "{{ tmp_dir }}/talosconfig"
      tags: ["bootstrap"]
      when: inventory_hostname == groups['talos_cp'][0]
      register: __etcd_check

    - name: Bootstrap tasks
      tags: ["bootstrap"]
      environment:
        TALOSCONFIG: "{{ tmp_dir }}/talosconfig"
      when:
        - inventory_hostname == groups['talos_cp'][0]
        - __etcd_check.rc != 0
      block:
        - name: Apply config on first control plane node  # noqa no-changed-when
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: "talosctl -n {{ ansible_host }} apply-config --insecure --file {{ inventory_hostname }}.yaml"

        - name: Wait until config is applied
          check_mode: false
          changed_when: false
          failed_when: false
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: "talosctl -n {{ ansible_host }} disks"
          until: __wait.rc == 0
          retries: 20
          delay: 5
          register: __wait

        - name: Bootstrap cluster  # noqa no-changed-when
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: "talosctl -n {{ ansible_host }} bootstrap"

    - name: Check if node is configured
      check_mode: false
      changed_when: false
      failed_when:
        - __disks_check.rc != 0
        - "'bad certificate' not in __disks_check.stderr"
      ansible.builtin.command:
        chdir: "{{ tmp_dir }}"
        cmd: "talosctl -n {{ ansible_host }} disks --insecure"
      environment:
        TALOSCONFIG: "{{ tmp_dir }}/talosconfig"
      tags: ["node"]
      register: __disks_check

    - name: Apply node configs  # noqa no-changed-when
      ansible.builtin.command:
        chdir: "{{ tmp_dir }}"
        cmd: >-
          talosctl -n {{ ansible_host }} apply-config
          {% if __disks_check.rc == 0 %}
          --insecure
          {% endif %}
          --file {{ inventory_hostname }}.yaml
      environment:
        TALOSCONFIG: "{{ tmp_dir }}/talosconfig"
      tags: ["node"]

    - name: Update kubeconfig  # noqa no-changed-when
      run_once: true
      ansible.builtin.command:
        chdir: "{{ tmp_dir }}"
        cmd: "talosctl -n {{ ansible_host }} kubeconfig --force"
      environment:
        TALOSCONFIG: "{{ tmp_dir }}/talosconfig"
      tags: ["kubeconfig"]

    - name: Upgrade Talos and Kubernetes
      tags: ["upgrade"]
      when: '"upgrade" in ansible_run_tags'
      environment:
        TALOSCONFIG: "{{ tmp_dir }}/talosconfig"
      block:
        - name: Get current Talos version
          check_mode: false
          changed_when: false
          failed_when: false
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: "talosctl -n {{ ansible_host }} version --short"
          register: __version

        - name: Upgrade if required  # noqa no-changed-when
          throttle: 1
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: "talosctl -n {{ ansible_host }} upgrade --image {{ talos_image }}"
          vars:
            server_tag: "{{ __version.stdout | regex_search('^Server:\\n.+\\n\\s+Tag:\\s+v(\\S+)$', '\\1', multiline=true) | first }}"
          when: server_tag is version(talos_version, '<')

        - name: Get node info
          run_once: true
          kubernetes.core.k8s_info:
            context: "{{ talos_kubectl_context }}"
            kind: Node
          register: __node

        - name: Upgrade Kubernetes if required  # noqa no-changed-when
          run_once: true
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: "talosctl -n {{ ansible_host }} upgrade-k8s --to {{ kube_version }}"
          vars:
            cmp_vers: "v{{ kube_version }}"
          when: __node.resources | json_query('[].status.nodeInfo.kubeletVersion') | select('version', cmp_vers, '<')

  post_tasks:
    - name: Eject boot disk
      delegate_to: "{{ vm_host }}"
      vars:
        ansible_connection: ssh
        ok_err: "doesn't have media"
      ansible.builtin.command:
        cmd: >-
          virsh change-media {{ inventory_hostname }} vdc
          --eject
          --config
          {% if 'eject' in ansible_run_tags %}
          --live
          {% endif %}
      register: eject
      changed_when: "'Successfully ejected media' in eject.stdout"
      failed_when:
        - eject.rc != 0
        - ok_err not in eject.stderr
      tags: ["eject"]

    - name: Wait until API servers are up
      kubernetes.core.k8s_info:
        context: "{{ talos_kubectl_context }}"
        kind: Pod
        name: "kube-apiserver-{{ inventory_hostname }}"
        namespace: kube-system
        wait: true
      register: __api_server
      until: __api_server is succeeded
      retries: 120
      delay: 1
      when: inventory_hostname in groups['talos_cp']
      tags: ["api-server"]

- name: Setup Kubernetes from control plane
  hosts: talos_cp[0]
  become: false
  gather_facts: false
  module_defaults:
    group/k8s:
      context: "{{ talos_kubectl_context }}"
  vars:
    ansible_connection: local
  tags: ["system"]
  pre_tasks:
    - name: Get pending CSRs
      kubernetes.core.k8s_info:
        api_version: certificates.k8s.io/v1
        kind: CertificateSigningRequest
      register: __csrs
      tags: ["certs"]

    - name: Approve pending certificates  # noqa no-changed-when
      ansible.builtin.command:
        cmd: "kubectl --context {{ talos_kubectl_context }} certificate approve {{ item.metadata.name }}"
      loop: "{{ __csrs.resources | selectattr('status', 'eq', {}) }}"
      loop_control:
        label: "{{ item.metadata.name }}"
      tags: ["certs"]

  tasks:
    - name: Deploy cert-approver
      kubernetes.core.k8s:
        src: "https://raw.githubusercontent.com/alex1989hu/kubelet-serving-cert-approver/main/deploy/standalone-install.yaml"
        state: present
      tags: ["certs", "cert-approver"]

    - name: Create tigera-operator namespace
      kubernetes.core.k8s:
        state: present
        resource_definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: tigera-operator
            labels:
              pod-security.kubernetes.io/enforce: privileged
              pod-security.kubernetes.io/audit: privileged
              pod-security.kubernetes.io/warn: privileged
      tags: ["calico"]

    - name: "Ensure operator config map is {{ cm_state }}"
      kubernetes.core.k8s:
        src: "{{ repo_base_dir }}/files/talos/calico-services-configmap.yml"
        state: "{{ cm_state }}"
      vars:
        cm_state: "{{ calico_ebpf_enabled | ternary('present', 'absent') }}"
      tags: ["calico"]

    - name: Add Calico Helm repo
      kubernetes.core.helm_repository:
        name: "projectcalico"
        repo_url: "https://docs.tigera.io/calico/charts"
      tags: ["calico"]

    - name: Deploy Calico chart
      kubernetes.core.helm:
        name: calico
        chart_ref: projectcalico/tigera-operator
        chart_version: "<3.30"
        release_namespace: tigera-operator
        update_repo_cache: true
        release_values: "{{ lookup('template', '{{ repo_base_dir }}/files/talos/calico-values.yml.j2') | from_yaml }}"
      tags: ["calico"]

    - name: Apply BGP config
      ansible.builtin.include_tasks:
        file: ../tasks/kube_or_calicoctl.yml
        apply:
          tags: ["calico", "bgp"]
          notify: Restart calico-node
      tags: ["calico", "bgp"]
      vars:
        tpl_file: "{{ repo_base_dir }}/files/talos/calico-bgp.yml.j2"

    - name: Apply Felix config
      ansible.builtin.include_tasks:
        file: ../tasks/kube_or_calicoctl.yml
        apply:
          tags: ["calico", "felix"]
      tags: ["calico", "felix"]
      vars:
        tpl_file: "{{ repo_base_dir }}/files/talos/calico-felix.yml.j2"

  handlers:
    - name: Restart calico-node  # noqa no-changed-when
      ansible.builtin.command:
        cmd: "kubectl rollout restart daemonset --context {{ talos_kubectl_context }} -n calico-system calico-node"

- name: Setup Kubernetes from all nodes
  hosts: talos
  become: false
  gather_facts: false
  module_defaults:
    group/k8s:
      context: "{{ talos_kubectl_context }}"
  vars:
    ansible_connection: local
  tags: ["system"]
  tasks:
    - name: Apply Node config
      ansible.builtin.include_tasks:
        file: ../tasks/kube_or_calicoctl.yml
        apply:
          tags: ["calico", "bgp"]
      tags: ["calico", "bgp"]
      vars:
        tpl_file: "{{ repo_base_dir }}/files/talos/calico-node.yml.j2"

    - name: Wait until Calico API server is up
      run_once: true
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: calico-apiserver
        namespace: calico-apiserver
        wait: true
      tags: ["calico", "status"]

    - name: Create calico node status
      kubernetes.core.k8s:
        state: "{{ calico_node_status | bool | ternary('present', 'absent') }}"
        template: "{{ repo_base_dir }}/files/talos/calico-node-status.yml.j2"
      tags: ["calico", "status"]

- name: Setup Kubernetes
  hosts: talos_cp[0]
  tags: ["apps"]
  gather_facts: false
  module_defaults:
    group/k8s:
      context: "{{ talos_kubectl_context }}"
  vars:
    ansible_connection: local
  tasks:
    - name: Add metrics-server Helm repo
      kubernetes.core.helm_repository:
        name: "metrics-server"
        repo_url: "https://kubernetes-sigs.github.io/metrics-server/"
      tags: ["metrics-server"]

    - name: Deploy metrics-server chart
      kubernetes.core.helm:
        name: metrics-server
        chart_ref: metrics-server/metrics-server
        chart_version: "3.x"
        release_namespace: kube-system
        update_repo_cache: true
      tags: ["metrics-server"]

    - name: Create MetalLB namespace
      kubernetes.core.k8s:
        state: present
        resource_definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: metallb-system
            labels:
              pod-security.kubernetes.io/enforce: privileged
              pod-security.kubernetes.io/audit: privileged
              pod-security.kubernetes.io/warn: privileged
      tags: ["metallb"]

    - name: Add MetalLB Helm repo
      kubernetes.core.helm_repository:
        name: "metallb"
        repo_url: "https://metallb.github.io/metallb"
      tags: ["metallb"]

    - name: Deploy MetalLB chart
      kubernetes.core.helm:
        name: metallb
        chart_ref: metallb/metallb
        chart_version: "<0.14"
        release_namespace: metallb-system
        update_repo_cache: true
        release_values:
          speaker:
            enabled: false
      tags: ["metallb"]

    - name: Wait for metallb-controller
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: metallb-system
        field_selectors:
          - status.phase=Running
        label_selectors:
          - app.kubernetes.io/name=metallb
        wait: true
      tags: ["metallb"]

    - name: Create MetalLB IP pool
      kubernetes.core.k8s:
        template: "{{ repo_base_dir }}/files/talos/metallb-pool.yml.j2"
        state: present
      tags: ["metallb"]

    - name: Include config tasks
      ansible.builtin.include_tasks:
        file: ../tasks/kube.yml
        apply:
          delegate_to: localhost
      tags: ["always"]
