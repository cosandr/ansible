#!/usr/bin/env -S ansible-playbook
---

# https://www.talos.dev/v1.11/reference/configuration/

- name: Setup Talos
  hosts: talos
  become: false
  gather_facts: false
  vars:
    tmp_dir: "/tmp/talos-config"
    force: false
  tags: ["system"]
  pre_tasks:
    - name: Reset tasks
      tags: ["reset"]
      when: "'reset' in ansible_run_tags"
      block:
        - name: Mount boot disk  # noqa no-changed-when - Output is the same
          delegate_to: "{{ vm_host }}"
          ansible.builtin.command:
            cmd: "virsh change-media {{ inventory_hostname }} vdb /var/lib/libvirt/images/talos-boot.iso --config --live"

        - name: Reset node  # noqa no-changed-when - Always changed
          delegate_to: localhost
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: "talosctl -n {{ ansible_host }} reset --graceful=false --wait=false --reboot"
          environment:
            TALOSCONFIG: "{{ tmp_dir }}/talosconfig"

        # Wait flag hangs, this is is much more reliable
        - name: Wait until node is up
          delegate_to: localhost
          check_mode: false
          changed_when: false
          failed_when: false
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: "talosctl -n {{ ansible_host }} get disks --insecure"
          until: __wait.rc == 0
          retries: 20
          delay: 5
          register: __wait

        - name: End host
          ansible.builtin.meta: end_host
  tasks:
    - name: Download Talos ISO
      delegate_to: "{{ vm_host }}"
      ansible.builtin.get_url:
        url: "https://factory.talos.dev/image/{{ talos_schematic }}/v{{ talos_version }}/metal-amd64.iso"
        dest: "/var/lib/libvirt/images/talos-boot.iso"
        owner: root
        group: root
        mode: "0644"
        timeout: 600
      tags: ["download"]
      when: "'download' in ansible_run_tags"

    - name: Create temporary Talos config dir
      delegate_to: localhost
      run_once: true
      ansible.builtin.file:
        path: "{{ tmp_dir }}"
        state: directory
        mode: "0750"
      tags: ["config", "host"]

    - name: Copy secrets
      delegate_to: localhost
      run_once: true
      ansible.builtin.copy:
        src: "{{ repo_base_dir }}/files/talos/secrets_vault.yml"
        dest: "{{ tmp_dir }}/secrets.yaml"
        mode: "0640"
      tags: ["config"]

    - name: Copy config patch
      delegate_to: localhost
      run_once: true
      ansible.builtin.template:
        src: "{{ repo_base_dir }}/files/talos/gen-config-patch.yaml.j2"
        dest: "{{ tmp_dir }}/all.yaml"
        mode: "0640"
      tags: ["config"]

    - name: Generate Talos config
      delegate_to: localhost
      run_once: true
      ansible.builtin.command:
        chdir: "{{ tmp_dir }}"
        creates: "{{ force | bool | ternary(omit, tmp_dir + '/controlplane.yaml') }}"
        cmd: >-
          talosctl gen config "{{ kube_api_server }}" "https://{{ kube_api_server }}:6443"
            {% if force | bool %}
            --force
            {% endif %}
            --kubernetes-version {{ kube_version }}
            --additional-sans="{{ vips.talos.control_plane | join(',') }}"
            --with-docs=false
            --with-examples=false
            --with-secrets secrets.yaml
            --config-patch @all.yaml
      tags: ["config"]

    - name: Configure endpoints  # noqa no-changed-when - no output
      delegate_to: localhost
      run_once: true
      ansible.builtin.command:
        chdir: "{{ tmp_dir }}"
        cmd: "talosctl config endpoint {{ groups['talos_cp'] | map('extract', hostvars, 'ansible_host') | join(' ') }}"
      environment:
        TALOSCONFIG: "{{ tmp_dir }}/talosconfig"
      tags: ["config"]

    - name: Copy host patches
      delegate_to: localhost
      ansible.builtin.template:
        src: "{{ repo_base_dir }}/files/talos/node-patch.yaml.j2"
        dest: "{{ tmp_dir }}/{{ inventory_hostname }}-patch.yaml"
        mode: "0640"
      tags: ["host"]

    - name: Generate host configs
      delegate_to: localhost
      ansible.builtin.command:
        chdir: "{{ tmp_dir }}"
        creates: "{{ force | bool | ternary(omit, tmp_dir + '/' + inventory_hostname + '.yaml') }}"
        cmd: >-
          talosctl machineconfig patch {{ src_file }}.yaml
            --patch @{{ inventory_hostname }}-patch.yaml
            -o {{ inventory_hostname }}.yaml
      vars:
        src_file: "{{ ('talos_cp' in group_names) | ternary('controlplane', 'worker') }}"
      tags: ["host"]

    - name: Check if cluster is bootstrapped
      delegate_to: localhost
      check_mode: false
      changed_when: false
      failed_when: false
      ansible.builtin.command:
        chdir: "{{ tmp_dir }}"
        cmd: "talosctl -n {{ ansible_host }} etcd status"
      environment:
        TALOSCONFIG: "{{ tmp_dir }}/talosconfig"
      tags: ["bootstrap"]
      when: inventory_hostname == groups['talos_cp'][0]
      register: __etcd_check

    - name: Bootstrap tasks
      delegate_to: localhost
      tags: ["bootstrap"]
      environment:
        TALOSCONFIG: "{{ tmp_dir }}/talosconfig"
      when:
        - inventory_hostname == groups['talos_cp'][0]
        - __etcd_check.rc != 0
      block:
        - name: Apply config on first control plane node  # noqa no-changed-when
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: "talosctl -n {{ ansible_host }} apply-config --insecure --file {{ inventory_hostname }}.yaml"

        - name: Wait until config is applied
          check_mode: false
          changed_when: false
          failed_when: false
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: "talosctl -n {{ ansible_host }} get disks"
          until: __wait.rc == 0
          retries: 20
          delay: 5
          register: __wait

        - name: Bootstrap cluster  # noqa no-changed-when
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: "talosctl -n {{ ansible_host }} bootstrap"

    - name: Check if node is configured
      delegate_to: localhost
      check_mode: false
      changed_when: false
      failed_when:
        - __disks_check.rc != 0
        - "'bad certificate' not in __disks_check.stderr"  # talosctl <= 1.5
        - "'certificate required' not in __disks_check.stderr"  # talosctl >= 1.6
        - "'unknown authority' not in __disks_check.stderr"  # talosctl >= 1.8
      ansible.builtin.command:
        chdir: "{{ tmp_dir }}"
        cmd: "talosctl -n {{ ansible_host }} get disks --insecure"
      environment:
        TALOSCONFIG: "{{ tmp_dir }}/talosconfig"
      tags: ["node"]
      register: __disks_check

    - name: Apply node configs  # noqa no-changed-when
      delegate_to: localhost
      ansible.builtin.command:
        chdir: "{{ tmp_dir }}"
        cmd: >-
          talosctl -n {{ ansible_host }} apply-config
          {% if __disks_check.rc == 0 %}
          --insecure
          {% endif %}
          {% if talos_staged | default(false) | bool %}
          --mode=staged
          {% endif %}
          --file {{ inventory_hostname }}.yaml
      environment:
        TALOSCONFIG: "{{ tmp_dir }}/talosconfig"
      tags: ["node"]

    - name: Update kubeconfig  # noqa no-changed-when
      delegate_to: localhost
      run_once: true
      ansible.builtin.command:
        chdir: "{{ tmp_dir }}"
        cmd: "talosctl -n {{ ansible_host }} kubeconfig --force"
      environment:
        TALOSCONFIG: "{{ tmp_dir }}/talosconfig"
      tags: ["kubeconfig"]

    - name: Upgrade Talos and Kubernetes
      delegate_to: localhost
      tags: ["upgrade"]
      when: '"upgrade" in ansible_run_tags'
      environment:
        TALOSCONFIG: "{{ tmp_dir }}/talosconfig"
      block:
        - name: Get current Talos version
          check_mode: false
          changed_when: false
          failed_when: false
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: "talosctl -n {{ ansible_host }} version --short"
          register: __version

        - name: Upgrade if required  # noqa no-changed-when
          throttle: 1
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: >-
              talosctl -n {{ ansible_host }} upgrade
              {% if talos_staged | default(false) | bool %}
              --stage
              {% endif %}
              --image {{ talos_image }}
          vars:
            server_tag: "{{ __version.stdout | regex_search('^Server:\\n.+\\n\\s+Tag:\\s+v(\\S+)$', '\\1', multiline=true) | first }}"
          when: server_tag is version(talos_version, '<') or "'force-upgrade' in ansible_run_tags"

        - name: Get node info
          run_once: true
          kubernetes.core.k8s_info:
            context: "{{ talos_kubectl_context }}"
            kind: Node
          register: __node
          when: inventory_hostname in groups['talos_cp']

        - name: Upgrade Kubernetes if required  # noqa no-changed-when
          run_once: true
          ansible.builtin.command:
            chdir: "{{ tmp_dir }}"
            cmd: "talosctl -n {{ ansible_host }} upgrade-k8s --to {{ kube_version }}"
          vars:
            cmp_vers: "v{{ kube_version }}"
          when:
            - inventory_hostname in groups['talos_cp']
            - __node.resources | json_query('[].status.nodeInfo.kubeletVersion') | select('version', cmp_vers, '<')

  post_tasks:
    - name: Eject boot disk
      delegate_to: "{{ vm_host }}"
      vars:
        ok_err: "doesn't have media"
      ansible.builtin.command:
        cmd: >-
          virsh change-media {{ inventory_hostname }} vdb
          --eject
          --config
          {% if 'eject' in ansible_run_tags %}
          --live
          {% endif %}
      register: eject
      changed_when: "'Successfully ejected media' in eject.stdout"
      failed_when:
        - eject.rc != 0
        - ok_err not in eject.stderr
      tags: ["eject"]

    - name: Wait until API servers are up
      delegate_to: localhost
      kubernetes.core.k8s_info:
        context: "{{ talos_kubectl_context }}"
        kind: Pod
        name: "kube-apiserver-{{ inventory_hostname }}"
        namespace: kube-system
        wait: true
      register: __api_server
      until: __api_server is succeeded
      retries: 120
      delay: 1
      when: inventory_hostname in groups['talos_cp']
      tags: ["api-server"]

- name: Setup Kubernetes from control plane
  hosts: talos_cp[0]
  become: false
  gather_facts: false
  module_defaults:
    group/k8s:
      context: "{{ talos_kubectl_context }}"
  tags: ["system"]
  pre_tasks:
    - name: Get pending CSRs
      delegate_to: localhost
      kubernetes.core.k8s_info:
        api_version: certificates.k8s.io/v1
        kind: CertificateSigningRequest
      register: __csrs
      tags: ["certs"]

    - name: Approve pending certificates  # noqa no-changed-when
      delegate_to: localhost
      ansible.builtin.command:
        cmd: "kubectl --context {{ talos_kubectl_context }} certificate approve {{ item.metadata.name }}"
      loop: "{{ __csrs.resources | selectattr('status', 'eq', {}) }}"
      loop_control:
        label: "{{ item.metadata.name }}"
      tags: ["certs"]

  tasks:
    - name: Install Gateway API CRDs
      delegate_to: localhost
      kubernetes.core.k8s:
        src: "https://github.com/kubernetes-sigs/gateway-api/releases/download/v{{ gateway_api_version }}/experimental-install.yaml"
        state: present
      tags: ["cilium", "crd"]

    - name: Add Cilium Helm repo
      delegate_to: localhost
      kubernetes.core.helm_repository:
        name: "cilium"
        repo_url: "https://helm.cilium.io/"
      tags: ["cilium"]

    - name: Deploy Cilium chart
      delegate_to: localhost
      kubernetes.core.helm:
        name: cilium
        chart_ref: cilium/cilium
        chart_version: "{{ cilium_version }}"
        release_namespace: kube-system
        update_repo_cache: true
        release_values: "{{ lookup('template', repo_base_dir + '/files/talos/cilium-values.yml.j2') | from_yaml }}"
      tags: ["cilium"]

    - name: Wait until Cilium Operator is ready
      delegate_to: localhost
      kubernetes.core.k8s_info:
        context: "{{ talos_kubectl_context }}"
        kind: Deployment
        name: "cilium-operator"
        namespace: kube-system
        wait: true
      register: __cilium_operator
      until: __cilium_operator is succeeded
      retries: 120
      delay: 1
      tags: ["cilium"]

    - name: Apply Cilium BGP config
      delegate_to: localhost
      kubernetes.core.k8s:
        template: "{{ repo_base_dir }}/files/talos/cilium-bgp.yml.j2"
        state: present
      tags: ["cilium"]

    - name: Apply Cilium LB config
      delegate_to: localhost
      kubernetes.core.k8s:
        template: "{{ repo_base_dir }}/files/talos/cilium-lb-pool.yml.j2"
        state: present
      tags: ["cilium"]

    - name: Create admin daemonset
      delegate_to: localhost
      kubernetes.core.k8s:
        template: "{{ repo_base_dir }}/files/talos/admin-daemonset.yml.j2"
        state: present
        # true blocks for ever if DS has 0 desired pods
        wait: "{{ enable_admin_pods | bool }}"
      tags: ["admin"]

- name: Setup Kubernetes from all nodes
  hosts: talos
  become: false
  gather_facts: false
  module_defaults:
    group/k8s:
      context: "{{ talos_kubectl_context }}"
  tags: ["system"]
  tasks:
    - name: Apply node labels
      delegate_to: localhost
      kubernetes.core.k8s:
        kind: Node
        name: "{{ inventory_hostname }}"
        state: patched
        resource_definition:
          metadata:
            labels: "{{ node_labels }}"
      tags: ["node", "labels"]

    - name: Get admin pod on self
      delegate_to: localhost
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: kube-system
        label_selectors:
          - app.kubernetes.io/name=admin
          - app.kubernetes.io/managed-by=ansible
        field_selectors:
          - "spec.nodeName={{ inventory_hostname }}"
      register: __admin_pod
      tags: ["zfs"]

    - name: Prepare OpenEBS ZFS provisioner
      vars:
        ansible_connection: kubernetes.core.kubectl
        ansible_kubectl_context: "{{ talos_kubectl_context }}"
        ansible_kubectl_namespace: "{{ __admin_pod.resources[0].metadata.namespace }}"
        ansible_kubectl_pod: "{{ __admin_pod.resources[0].metadata.name }}"
      when:
        - __admin_pod.resources
        - vm_extra_disks | selectattr('serial', 'defined') | selectattr('serial', 'eq', 'raw01')
      tags: ["zfs"]
      block:
        - name: Get existing zpools
          changed_when: false
          check_mode: false
          ansible.builtin.command:
            cmd: "chroot /host zpool list --json"
          register: __zpool_list

        - name: Parse output
          ansible.builtin.set_fact:
            zpool_list: "{{ __zpool_list.stdout | from_json }}"
          when: __zpool_list.stdout != ""

        - name: Create zpool if it's missing  # noqa no-changed-when
          ansible.builtin.command:
            cmd: >-
              chroot /host zpool create
                -o ashift=12
                -o autotrim=on
                -O acltype=posixacl -O xattr=sa -O dnodesize=auto
                -O compression=lz4
                -O normalization=formD
                -O relatime=on
                -O mountpoint=none
                ebs /dev/disk/by-id/virtio-raw01
          when: __zpool_list.stdout == "" or 'ebs' not in zpool_list.pools

- name: Setup Kubernetes
  hosts: talos_cp[0]
  tags: ["apps"]
  gather_facts: false
  module_defaults:
    group/k8s:
      context: "{{ talos_kubectl_context }}"
  tasks:
    - name: Create restic-ca secret
      delegate_to: localhost
      kubernetes.core.k8s:
        state: present
        namespace: default
        resource_definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: restic-ca
            annotations:
              reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
          type: Opaque
          stringData:
            theia.crt: "{{ lookup('file', hostvars['theia'].ca_publickey_path) }}"
      tags: ["ca", "restic"]

    - name: Create Flux namespace
      delegate_to: localhost
      kubernetes.core.k8s:
        state: present
        kind: Namespace
        name: flux-system
      tags: ["flux"]

    - name: Deploy Flux operator
      delegate_to: localhost
      kubernetes.core.helm:
        name: flux-operator
        chart_ref: "oci://ghcr.io/controlplaneio-fluxcd/charts/flux-operator"
        chart_version: "{{ flux_operator_version }}"
        release_namespace: flux-system
        create_namespace: false
      tags: ["flux"]

    - name: Get GitLab host keys
      delegate_to: localhost
      check_mode: false
      changed_when: false
      ansible.builtin.command:
        cmd: "ssh-keyscan -q gitlab.{{ domains['dv'] }}"
      register: __gitlab_host_keys
      tags: ["flux"]

    - name: Set gitlab_host_keys fact
      ansible.builtin.set_fact:
        gitlab_host_keys: "{{ __gitlab_host_keys.stdout_lines | sort | join('\n') }}"
      tags: ["flux"]

    - name: Create Flux instance
      delegate_to: localhost
      kubernetes.core.k8s:
        state: present
        resource_definition: "{{ lookup('template', repo_base_dir + '/files/talos/' + item) | from_yaml_all }}"
      loop:
        - flux-gitlab-secret_vault.yml
        - flux-gitlab.yml.j2
      tags: ["flux"]

    - name: Include config tasks
      ansible.builtin.include_tasks:
        file: ../tasks/kube.yml
        apply:
          delegate_to: localhost
      tags: ["always"]
