#!/usr/bin/env -S ansible-playbook
---

- name: Romsto playbook
  hosts: romsto
  tasks:
    - name: Setup extra SSD
      ansible.builtin.blockinfile:
        path: /boot/config/go
        marker: "# {mark} datassd"
        block: |
          # Enable swap partition
          swapon -d {{ swap_disk }}

          # Mount persistent data partition
          mkdir -p {{ persistent_disk.path }}
          mount -o {{ ssd_mount_opts }} {{ persistent_disk.dev }} {{ persistent_disk.path }}

          # Mount unassigned data partition
          mkdir -p {{ data_disk.path }}
          mount -o {{ ssd_mount_opts }} {{ data_disk.dev }} {{ data_disk.path }}
      tags: ["go", "datassd"]

    - name: Ensure data-ssd scrub user script dir exists
      ansible.builtin.file:
        path: "{{ user_scripts_path }}/scrub-datassd"
        state: directory
        owner: root
        group: root
        mode: "0700"
      tags: ["datassd", "userscripts"]

    # Manually add weekly schedule
    - name: Setup extra SSD scrub
      ansible.builtin.copy:
        dest: "{{ user_scripts_path }}/scrub-datassd/script"
        owner: root
        group: root
        mode: "0600"
        content: |
          #!/bin/bash

          #name=scrub-datassd
          #description=Scrub datassd
          #arrayStarted=true
          #noParity=true

          /sbin/btrfs scrub start {{ persistent_disk.path }} &> /dev/null
          /sbin/btrfs scrub start {{ data_disk.path }} &> /dev/null
      tags: ["datassd", "userscripts"]

    - name: Ensure data-ssd mount user script dir exists
      ansible.builtin.file:
        path: "{{ user_scripts_path }}/0-mount-datassd"
        state: directory
        owner: root
        group: root
        mode: "0700"
      tags: ["datassd", "userscripts"]

    - name: Ensure data SSD is mounted on array start
      ansible.builtin.copy:
        dest: "{{ user_scripts_path }}/0-mount-datassd/script"
        owner: root
        group: root
        mode: "0600"
        content: |
          #!/bin/bash

          #name=0-mount-datassd
          #description=Ensure {{ data_disk.path | basename }} is mounted
          #arrayStarted=true
          #noParity=true

          if ! grep -q '{{ data_disk.path | regex_escape() }}' /proc/mounts; then
            mkdir -p {{ data_disk.path }}
            mount -o {{ ssd_mount_opts }} {{ data_disk.dev }} {{ data_disk.path }}
          fi
      tags: ["datassd", "userscripts"]

    - name: Configure mlocate
      tags: ["mlocate"]
      block:
        - name: Create mlocate db dir
          ansible.builtin.file:
            path: "{{ persistent_disk.path }}/mlocate"
            state: directory
            owner: root
            group: slocate
            mode: "0750"

        - name: Copy config file  # noqa line-length
          ansible.builtin.copy:
            dest: "{{ persistent_disk.path }}/updatedb.conf"
            owner: root
            group: root
            mode: "0644"
            content: |
              PRUNE_BIND_MOUNTS = "yes"
              PRUNEFS = "9p afs anon_inodefs auto autofs bdev binfmt_misc cgroup cifs coda configfs cpuset debugfs devpts ecryptfs exofs fuse fuse.sshfs fusectl gfs gfs2 gpfs hugetlbfs inotifyfs iso9660 jffs2 lustre mqueue ncpfs nfs nfs4 nfsd pipefs proc ramfs rootfs rpc_pipefs securityfs selinuxfs sfs sockfs sysfs tmpfs ubifs udf usbfs ceph fuse.ceph"
              PRUNENAMES = ".git .hg .svn .bzr .arch-ids {arch} CVS"
              PRUNEPATHS = "/afs /dev /media /mnt /net /proc /sys /tmp /usr/tmp /var/cache/ccache /var/lib/ceph /var/spool/cups /var/tmp /var/lib/docker {{ data_disk.path }}/docker/data /mnt/disk*"

        - name: Configure mlocate on boot
          ansible.builtin.blockinfile:
            path: /boot/config/go
            marker: "# {mark} mlocate"
            block: |
              ln -sf {{ persistent_disk.path }}/updatedb.conf /etc/updatedb.conf
              [ -d /var/lib/mlocate ] && rm -rf /var/lib/mlocate
              ln -s {{ persistent_disk.path }}/mlocate /var/lib/
          tags: ["go"]

    - name: Ensure user script dir exists
      ansible.builtin.file:
        path: "{{ user_scripts_path }}/ensure-25gbe"
        state: directory
        owner: root
        group: root
        mode: "0700"
      tags: ["25gbe", "userscripts"]

    # Manually schedule to every 5 minutes
    - name: Ensure data SSD is mounted on array start
      ansible.builtin.copy:
        dest: "{{ user_scripts_path }}/ensure-25gbe/script"
        owner: root
        group: root
        mode: "0600"
        content: |
          #!/bin/bash

          #name=ensure-25gbe
          #description=Ensure 2.5GbE has IP address
          #arrayStarted=true
          #noParity=true

          MAC_ADDRESS="{{ vault_25gbe_mac }}"
          IP_ADDRESS="10.25.0.6/24"
          IFNAME=""

          # Find device name
          for f in /sys/class/net/eth*/address; do
              if [[ $(<"$f") = "$MAC_ADDRESS" ]]; then
                  IFNAME="$(basename "$(dirname "$f")")"
                  break
              fi
          done

          if [[ -z $IFNAME ]]; then
              echo "Could not determine interface name"
              exit 1
          fi

          ifstatus="$(ip addr show dev "$IFNAME")"

          if [[ $ifstatus != *"$IP_ADDRESS"* ]]; then
              echo "Adding $IP_ADDRESS to $IFNAME"
              ip addr add "$IP_ADDRESS" dev "$IFNAME"
          else
              echo "$IP_ADDRESS already set on $IFNAME"
          fi

          if [[ $ifstatus != *"mtu 9000"* ]]; then
              echo "Setting $IFNAME MTU to 9000"
              ip link set mtu 9000 "$IFNAME"
          else
              echo "MTU already set on $IFNAME"
          fi

          if [[ $ifstatus == *"state DOWN"* ]]; then
              echo "Setting $IFNAME up"
              ip link set "$IFNAME" up
          else
              echo "$IFNAME already up"
          fi
      tags: ["datassd", "userscripts"]

  roles:
    - role: nginx_site
      tags: ["nginx_site"]

    - role: promtail
      tags: ["promtail"]
  post_tasks:
    - name: Ensure promtail is persistent
      tags: ["promtail", "go"]
      block:
        - name: Copy promtail rc file
          ansible.builtin.copy:
            src: /etc/rc.d/rc.promtail
            remote_src: true
            dest: "{{ persistent_disk.path }}/promtail/rc.promtail"
            owner: root
            group: root
            mode: "0755"

        - name: Copy promtail logrotate config
          ansible.builtin.copy:
            src: /etc/logrotate.d/promtail
            remote_src: true
            dest: "{{ persistent_disk.path }}/promtail/promtail.logrotate"
            owner: root
            group: root
            mode: "0644"

        - name: Setup promtail on boot
          ansible.builtin.blockinfile:
            path: /boot/config/go
            marker: "# {mark} promtail"
            block: |
              install -o root -g root -m755 {{ persistent_disk.path }}/promtail/rc.promtail /etc/rc.d/rc.promtail
              install -o root -g root -m644 {{ persistent_disk.path }}/promtail/promtail.logrotate /etc/logrotate.d/promtail
              /etc/rc.d/rc.promtail start
