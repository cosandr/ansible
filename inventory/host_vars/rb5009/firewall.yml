---

__mt_interface_members_manual:
  - interface: "{{ mt_wan_port }}"
    list: WAN

__mt_interface_members_auto: >-
  {%- set tmp = [] -%}
  {%- for name, config in all_net.items() if 'mt_lists' in config -%}
  {%- for list in config.mt_lists -%}
  {{- tmp.append({'interface': name | upper, 'list': list}) -}}
  {%- endfor -%}
  {%- endfor -%}
  {{ tmp }}

mt_interface_members: "{{ __mt_interface_members_manual + __mt_interface_members_auto }}"

mt_interface_list: >-
  {%- set tmp = [] -%}
  {%- for name in mt_interface_members | map(attribute='list') | unique -%}
  {{- tmp.append({"name": name}) -}}
  {%- endfor -%}
  {{ tmp }}

mt_firewall_rules: "{{ lookup('template', repo_base_dir + '/files/mikrotik/firewall_vault.yml.j2', template_vars={'ipv4': true}) | from_yaml }}"
mt_firewall_nat: "{{ vault_mt_firewall_nat }}"

__mt_firewall_address_lists_manual:
  - address: "{{ wireguard_endpoint.split(':', 1)[0] }}"
    list: WANs
    comment: WAN
  - address: "{{ all_net.kube.cidr }}"
    list: kube
    comment: kube
  - address: "{{ ((__mt_wg_peers_manual | selectattr('comment', 'eq', 'p7') | first)['allowed-address'].split(',')
      | ansible.utils.ipv4 | ansible.utils.ipaddr('address')) | first }}"
    list: allow-general
    comment: p7
  - address: "10.0.50.51"
    list: no-inet
    comment: dht01
  - address: "10.0.50.54"
    list: no-inet
    comment: dht04
  - address: "10.0.50.55"
    list: no-inet
    comment: dht05

__mt_firewall_address_lists_auto: >-
  {%- set tmp = [] -%}
  {%- for h in groups['all'] | sort | difference([inventory_hostname]) if (hostvars[h].mt_firewall_address_lists | default([])) -%}
  {%- for item in hostvars[h].mt_firewall_address_lists if item.address | ansible.utils.ipv4 -%}
  {{- tmp.append({
    "address": item.address,
    "list": item.list,
    "comment": item.comment | default(h),
  }) -}}
  {%- endfor -%}
  {%- endfor -%}
  {{ tmp }}

mt_firewall_address_lists: "{{ __mt_firewall_address_lists_manual + __mt_firewall_address_lists_auto }}"

mt_firewall_mangle_ipv6:
  # https://forum.mikrotik.com/viewtopic.php?t=162930#p802790
  - action: change-mss
    chain: forward
    new-mss: clamp-to-pmtu
    out-interface: "{{ mt_wan_port }}"
    passthrough: true
    protocol: tcp
    tcp-flags: syn

mt_firewall_nat_ipv6:
  - chain: srcnat
    action: masquerade
    out-interface: WG1

# https://help.mikrotik.com/docs/display/ROS/Building+Advanced+Firewall#BuildingAdvancedFirewall-IPv6AddressLists
__mt_firewall_address_lists_ipv6_manual:
  - address: ::/128
    comment: 'defconf: unspecified address'
    list: bad_ipv6
  - address: ::1/128
    comment: 'defconf: lo'
    list: bad_ipv6
  - address: fec0::/10
    comment: 'defconf: site-local'
    list: bad_ipv6
  - address: ::ffff:0.0.0.0/96
    comment: 'defconf: ipv4-mapped'
    list: bad_ipv6
  - address: ::/96
    comment: 'defconf: ipv4 compat'
    list: bad_ipv6
  - address: 100::/64
    comment: 'defconf: discard only '
    list: bad_ipv6
  - address: 2001:db8::/32
    comment: 'defconf: documentation'
    list: bad_ipv6
  - address: 2001:10::/28
    comment: 'defconf: ORCHID'
    list: bad_ipv6
  - address: 3ffe::/16
    comment: 'defconf: 6bone'
    list: bad_ipv6
  - address: ::224.0.0.0/100
    comment: 'defconf: other'
    list: bad_ipv6
  - address: ::127.0.0.0/104
    comment: 'defconf: other'
    list: bad_ipv6
  - address: ::/104
    comment: 'defconf: other'
    list: bad_ipv6
  - address: ::255.0.0.0/104
    comment: 'defconf: other'
    list: bad_ipv6
  - address: 100::/64
    comment: 'defconf: RFC6890 Discard-only'
    list: not_global_ipv6
  - address: 2001::/32
    comment: 'defconf: RFC6890 TEREDO'
    list: not_global_ipv6
  - address: 2001:2::/48
    comment: 'defconf: RFC6890 Benchmark'
    list: not_global_ipv6
  - address: fc00::/7
    comment: 'defconf: RFC6890 Unique-Local'
    list: not_global_ipv6
  - address: "{{ wireguard_endpoint.split(':', 1)[0] }}"
    list: WANs
    comment: WAN

__mt_firewall_address_lists_ipv6_auto: >-
  {%- set tmp = [] -%}
  {%- for h in groups['all'] | sort | difference([inventory_hostname]) if (hostvars[h].mt_firewall_address_lists | default([])) -%}
  {%- for item in hostvars[h].mt_firewall_address_lists if item.address | ansible.utils.ipv6 -%}
  {{- tmp.append({
    "address": item.address | ansible.utils.ipaddr('host'),
    "list": item.list,
    "comment": item.comment | default(h),
  }) -}}
  {%- endfor -%}
  {%- endfor -%}
  {{ tmp }}

mt_firewall_address_lists_ipv6: "{{ __mt_firewall_address_lists_ipv6_manual + __mt_firewall_address_lists_ipv6_auto }}"

mt_firewall_rules_ipv6: "{{ lookup('template', repo_base_dir + '/files/mikrotik/firewall_vault.yml.j2', template_vars={'ipv4': false}) | from_yaml }}"

mt_firewall_raw_ipv6: "{{ vault_mt_firewall_raw_ipv6 }}"
