---

__mt_interface_members_manual:
  - interface: "{{ mt_wan_port }}"
    list: WAN

mt_firewall_rules: "{{ lookup('template', repo_base_dir + '/files/mikrotik/firewall_vault.yml.j2', template_vars={'ipv4': true}) | from_yaml }}"
mt_firewall_nat: "{{ vault_mt_firewall_nat }}"

__mt_firewall_raw_auto: >-
  {%- set tmp = [] -%}
  {%- for name in groups['all'] if hostvars[name].ansible_host is defined and
    hostvars[name].host_subnet | default('') == 'trusted' and
    hostvars[name].vault_mac_address is defined -%}
  {{- tmp.append({
    'action': 'accept',
    'chain': 'prerouting',
    'comment': 'Allow ' + name,
    'src-address': hostvars[name].ansible_host,
    'src-mac-address': hostvars[name].vault_mac_address,
  }) -}}
  {%- endfor -%}
  {%- for addr in subnets.general.trusted | ansible.utils.ipv4 -%}
  {{- tmp.append({
    'action': 'drop',
    'chain': 'prerouting',
    'comment': 'Drop others in trusted subnet',
    'src-address': addr,
  }) -}}
  {%- endfor -%}
  {{ tmp }}

mt_firewall_raw: "{{ __mt_firewall_raw_auto }}"

__kube_cidr_map: >-
  {%- set tmp = {} -%}
  {%- for name, config in all_net.items() if name in ['talos'] -%}
  {{- tmp.update({name: ([config.get('cidr_internal')] + [config.get('cidr6_internal')]) | select }) -}}
  {%- endfor -%}
  {{ tmp }}

__mt_firewall_subnet_lists:
  - "{{ subnets.general.noinet | andrei.utils.items2dictlist('address', list='no-inet', comment='general-no-inet') }}"
  - "{{ subnets.general.trusted | andrei.utils.items2dictlist('address', list='allow-lan', comment='general-trusted') }}"
  - "{{ subnets.mt.trusted | andrei.utils.items2dictlist('address', list='allow-lan', comment='wg-trusted') }}"
  - "{{ subnets.mt.webgw | andrei.utils.items2dictlist('address', list='allow-www', comment='wg-webgw') }}"
  - "{{ subnets.mt.webgw | andrei.utils.items2dictlist('address', list='allow-smtp', comment='wg-smtp-webgw') }}"
  - "{{ subnets.mt.rom | andrei.utils.items2dictlist('address', list='allow-smtp', comment='wg-smtp-rom') }}"
  - "{{ subnets.vm.gitlab | andrei.utils.items2dictlist('address', list='www', comment='vm-gitlab') }}"
  - "{{ subnets.vm.localgw | andrei.utils.items2dictlist('address', list='allow-www', comment='vm-localgw') }}"
  - "{{ subnets.vm.loki | andrei.utils.items2dictlist('address', list='loki', comment='vm-loki') }}"
  - "{{ subnets.vm.nextcloud | andrei.utils.items2dictlist('address', list='www', comment='vm-nextcloud') }}"
  - "{{ subnets.vm.prom | andrei.utils.items2dictlist('address', list='allow-lan', comment='vm-prom') }}"
  - "{{ subnets.vm.prom | andrei.utils.items2dictlist('address', list='www', comment='vm-prom') }}"
  - "{{ __kube_cidr_map.talos | andrei.utils.items2dictlist('address', list='talos', comment='talos') }}"
  - "{{ vips.vm | dict2items | selectattr('key', 'match', 'localgw\\d+') | map(attribute='value') | flatten
    | andrei.utils.items2dictlist('address', list='allow-www', comment='vm-localgw-vips') }}"
  - "{{ subnets.talos.lb | andrei.utils.items2dictlist('address', list='talos-lb', comment='talos-lb') }}"
  - "{{ [hostvars['ha'].ansible_host] | andrei.utils.items2dictlist('address', list='allow-talos-lb', comment='ha-talos-lb') }}"
  - "{{ [hostvars['theia'].host_ips.general] | andrei.utils.items2dictlist('address', list='samba', comment='theia-samba') }}"
  - "{{ [hostvars['desktop'].host_ips.public] | andrei.utils.items2dictlist('address', list='allow-samba', comment='desktop-samba-public') }}"
  - "{{ subnets.mgmt.unifios | andrei.utils.items2dictlist('address', list='unifi-os-server', comment='unifi-os-server') }}"

__mt_firewall_address_lists_manual:
  - address: "{{ hostvars['p7'].wireguard_ip }}"
    list: roaming-general
    comment: p7

__mt_firewall_address_lists_auto: >-
  {%- set tmp = [] -%}
  {%- for h in groups['all'] | sort | difference([inventory_hostname]) if (hostvars[h].mt_firewall_address_lists | default([])) -%}
  {%- for item in hostvars[h].mt_firewall_address_lists if item.address | ansible.utils.ipv4 -%}
  {{- tmp.append({
    "address": item.address,
    "list": item.list,
    "comment": item.comment | default(h),
  }) -}}
  {%- endfor -%}
  {%- endfor -%}
  {%- for item in __mt_firewall_subnet_lists | flatten if item.address | ansible.utils.ipv4 -%}
  {{- tmp.append(item) -}}
  {%- endfor -%}
  {{ tmp }}

mt_firewall_address_lists: "{{ __mt_firewall_address_lists_manual | flatten + __mt_firewall_address_lists_auto }}"

mt_firewall_mangle_ipv6:
  # https://forum.mikrotik.com/viewtopic.php?t=162930#p802790
  - action: change-mss
    chain: forward
    new-mss: clamp-to-pmtu
    out-interface-list: WAN
    passthrough: true
    protocol: tcp
    tcp-flags: syn

mt_firewall_nat_ipv6:
  - chain: srcnat
    action: masquerade
    out-interface: WG1

# https://help.mikrotik.com/docs/display/ROS/Building+Advanced+Firewall#BuildingAdvancedFirewall-IPv6AddressLists
__mt_firewall_address_lists_ipv6_manual:
  - address: ::/128
    comment: 'defconf: unspecified address'
    list: bad_ipv6
  - address: ::1/128
    comment: 'defconf: lo'
    list: bad_ipv6
  - address: fec0::/10
    comment: 'defconf: site-local'
    list: bad_ipv6
  - address: ::ffff:0.0.0.0/96
    comment: 'defconf: ipv4-mapped'
    list: bad_ipv6
  - address: ::/96
    comment: 'defconf: ipv4 compat'
    list: bad_ipv6
  - address: 100::/64
    comment: 'defconf: discard only '
    list: bad_ipv6
  - address: 2001:db8::/32
    comment: 'defconf: documentation'
    list: bad_ipv6
  - address: 2001:10::/28
    comment: 'defconf: ORCHID'
    list: bad_ipv6
  - address: 3ffe::/16
    comment: 'defconf: 6bone'
    list: bad_ipv6
  - address: ::224.0.0.0/100
    comment: 'defconf: other'
    list: bad_ipv6
  - address: ::127.0.0.0/104
    comment: 'defconf: other'
    list: bad_ipv6
  - address: ::/104
    comment: 'defconf: other'
    list: bad_ipv6
  - address: ::255.0.0.0/104
    comment: 'defconf: other'
    list: bad_ipv6
  - address: 100::/64
    comment: 'defconf: RFC6890 Discard-only'
    list: not_global_ipv6
  - address: 2001::/32
    comment: 'defconf: RFC6890 TEREDO'
    list: not_global_ipv6
  - address: 2001:2::/48
    comment: 'defconf: RFC6890 Benchmark'
    list: not_global_ipv6
  - address: fc00::/7
    comment: 'defconf: RFC6890 Unique-Local'
    list: not_global_ipv6

__mt_firewall_address_lists_ipv6_auto: >-
  {%- set tmp = [] -%}
  {%- for h in groups['all'] | sort | difference([inventory_hostname]) if (hostvars[h].mt_firewall_address_lists | default([])) -%}
  {%- for item in hostvars[h].mt_firewall_address_lists if item.address | ansible.utils.ipv6 -%}
  {{- tmp.append({
    "address": item.address | ansible.utils.ipaddr('host'),
    "list": item.list,
    "comment": item.comment | default(h),
  }) -}}
  {%- endfor -%}
  {%- endfor -%}
  {%- for item in __mt_firewall_subnet_lists | flatten if item.address | ansible.utils.ipv6 -%}
  {{- tmp.append(item) -}}
  {%- endfor -%}
  {{ tmp }}

mt_firewall_address_lists_ipv6: "{{ __mt_firewall_address_lists_ipv6_manual + __mt_firewall_address_lists_ipv6_auto }}"

mt_firewall_rules_ipv6: "{{ lookup('template', repo_base_dir + '/files/mikrotik/firewall_vault.yml.j2', template_vars={'ipv4': false}) | from_yaml }}"

__mt_firewall_raw_ipv6_auto: >-
  {%- set tmp = [] -%}
  {%- for name in groups['all'] if hostvars[name].ansible_host6 is defined and
    hostvars[name].host_subnet | default('') == 'trusted' and
    hostvars[name].vault_mac_address is defined -%}
  {{- tmp.append({
    'action': 'accept',
    'chain': 'prerouting',
    'comment': 'Allow ' + name,
    'src-address': hostvars[name].ansible_host6,
    'src-mac-address': hostvars[name].vault_mac_address,
  }) -}}
  {%- endfor -%}
  {%- for addr in subnets.general.trusted | ansible.utils.ipv6 -%}
  {{- tmp.append({
    'action': 'drop',
    'chain': 'prerouting',
    'comment': 'Drop others in trusted subnet',
    'src-address': addr,
  }) -}}
  {%- endfor -%}
  {{ tmp }}

mt_firewall_raw_ipv6: "{{ __mt_firewall_raw_ipv6_auto + vault_mt_firewall_raw_ipv6 }}"
