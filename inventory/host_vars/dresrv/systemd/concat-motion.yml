---

__sd_concat_motion:
  name: concat-motion
  service:
    content: |
      [Unit]
      Description=Concat motion files from the last day
      After=tank.mount
      Requires=tank.mount
      ConditionPathExists=/tank/media/motion

      [Service]
      Type=oneshot
      User=motion
      Group=motion
      Environment=CONCAT_FILE=/tmp/motion-concat.txt
      Environment=SRC_PATH=/tank/media/motion
      Environment=FFMPEG_ARGS="-c:v libx265 -x265-params crf=28 -preset:v faster -c:a aac -y -r {{ hostvars.drepi.motion_default_config.framerate }}"
      ExecStartPre={{ systemd_script_install_path }}/concat-motion-pre
      ExecStart={{ systemd_script_install_path }}/concat-motion
      ExecStartPost={{ systemd_script_install_path }}/concat-motion-post
      ProtectSystem=strict
      ProtectControlGroups=true
      ProtectKernelTunables=true
      PrivateDevices=true
      ReadWritePaths=/tank/media/motion /tmp

      [Install]
      WantedBy=multi-user.target

  # Daily at 02:00
  timer:
    enabled: true
    state: started
    content: |
      [Unit]
      Description=Concat motion files from the last day timer

      [Timer]
      Persistent=yes
      OnCalendar=*-*-* 02:00:00

      [Install]
      WantedBy=timers.target

  scripts:
    - dest: "{{ systemd_script_install_path }}/concat-motion"
      content: |
        #!/bin/bash

        if [ ! -f $CONCAT_FILE ]; then
          echo "$CONCAT_FILE: No such file"
          exit 0
        fi
        exec /usr/bin/ffmpeg -hide_banner -f concat -safe 0 \
          -i $CONCAT_FILE $FFMPEG_ARGS \
          $SRC_PATH/$(date -d yesterday +%Y%m%d).mkv

    - dest: "{{ systemd_script_install_path }}/concat-motion-pre"
      content: |
        #!/usr/bin/env python3

        import re
        import os
        from datetime import datetime, timedelta

        def main():
            concat_file = os.getenv('CONCAT_FILE')
            src_path = os.getenv('SRC_PATH')
            src_file_ext = os.getenv('SRC_FILE_EXT', ".mkv")
            src_time_format = os.getenv('SRC_TIME_FORMAT', r"%Y%m%d-%H%M%S")
            src_file_regex = os.getenv('SRC_FILE_REGEX', r'^(\d{8}-\d{6})-\d+$')
            if not concat_file:
                raise RuntimeError('CONCAT_FILE env var required')
            if not src_path:
                raise RuntimeError('SRC_PATH env var required')
            if not os.path.exists(src_path):
                raise RuntimeError("{} doesn't exist".format(src_path))
            re_src = re.compile(src_file_regex)
            yesterday = datetime.now().date() - timedelta(days=1)
            start = datetime(year=yesterday.year, month=yesterday.month, day=yesterday.day, hour=0, minute=0, second=0)
            end = datetime(year=yesterday.year, month=yesterday.month, day=yesterday.day, hour=23, minute=59, second=59)
            concat = []
            for f in os.listdir(src_path):
                name, ext = os.path.splitext(f)
                if ext != src_file_ext:
                    print("wrong extension {}, expected {}".format(ext, src_file_ext))
                    continue
                m = re_src.match(name)
                if not m:
                    print("{} doesn't match regex".format(name))
                    continue
                f_time = datetime.strptime(m.group(1), src_time_format)
                if start < f_time < end:
                    concat.append("file '{}'".format(os.path.join(src_path, f)))
            if not concat:
                print("no files to concat found")
                exit(0)
            print("concat {} files".format(len(concat)))
            concat.sort()
            with open(concat_file, 'w', encoding='utf-8') as fw:
                fw.write('\n'.join(concat))

        if __name__ == '__main__':
            main()

    - dest: "{{ systemd_script_install_path }}/concat-motion-post"
      content: |
        #!/usr/bin/env python3

        import os
        import re

        def main():
            concat_file = os.getenv('CONCAT_FILE')
            if not concat_file:
                raise RuntimeError('CONCAT_FILE env var required')
            if not os.path.exists(concat_file):
                print("No such file: {}".format(concat_file))
                return
            re_concat = re.compile(r"file '(\S+)'")
            with open(concat_file, 'r', encoding='utf-8') as fr:
                for l in fr:
                    m = re_concat.search(l)
                    if not m:
                        continue
                    os.unlink(m.group(1))
                    print("removed {}".format(m.group(1)))

        if __name__ == '__main__':
            main()
