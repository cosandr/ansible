---

firewalld_zones:
  - name: public
    interfaces: "{{ host_nic_names }}"

  - name: internal
    sources: "{{ wireguard_interface | default(false) | ternary([], node_exporter_allow_ips) }}"
    interfaces: "{{ wireguard_interface | default(false) | ternary([wireguard_interface], []) }}"

firewalld_services: >-
  {%- set tmp = [] -%}
  {%- for i in range(1, 4) -%}
  {{- tmp.extend(lookup('ansible.builtin.vars', '__firewalld_services_' + (i | string), default=[])) -}}
  {%- endfor -%}
  {{ tmp }}

firewall_rules: >-
  {%- set tmp = [] -%}
  {%- for i in range(1, 4) -%}
  {{- tmp.extend(lookup('ansible.builtin.vars', '__firewall_rules_' + (i | string), default=[])) -}}
  {%- endfor -%}
  {{ tmp }}

__firewalld_services_2:
  - name: cockpit
    state: absent
    zone: public

  - name: http
    zone: public

  - name: https
    zone: public

  - name: http
    zone: internal

  - name: https
    zone: internal

__firewall_rules_2:
  - port: "{{ node_exporter_port }}"
    zone: internal
    # If using wireguard, limit to IPs, otherwise there's no need
    sources: "{{ wireguard_interface | default(false) | ternary(node_exporter_allow_ips, []) }}"

  - port: "{{ nginx_exporter_port }}"
    zone: internal
    sources: "{{ wireguard_interface | default(false) | ternary(node_exporter_allow_ips, []) }}"

__firewall_rules_3: >-
  {%- set tmp = [] -%}
  {%- if wireguard_endpoint is defined -%}
  {{- tmp.append({
    'port': wireguard_endpoint.rsplit(':', 1)[1],
    'protocol': 'udp',
    'zone': 'public',
    }
  ) -}}
  {%- endif -%}
  {%- if ansible_port != 22 -%}
  {{- tmp.append({
    'port': 22,
    'zone': 'public',
    }
  ) -}}
  {%- endif -%}
  {{ tmp }}
