---

borg_libvirt_passphrase: "{{ vault_borg_libvirt_passphrase }}"
fstrim_timer_enabled: true
libvirt_vm_engine: "kvm"

vm_disk_format: "raw"
vm_host_list: "{{ groups['kvm_hv'] }}"
vm_host: "{{ vm_host_list[0] }}"
vm_cpus: 4
vm_mem: 4096
vm_template: "rocky9_packer.{{ vm_disk_format }}"
vm_os_id: "http://rockylinux.org/rocky/9"
vm_disk_pool: "default"
vm_ignition_path: "/var/lib/libvirt/images"
vm_extra_disks: []
vm_started: true
vm_customize: true
vm_cpu_mode: "{{ 'custom' if vm_cpu_model_name else 'host-passthrough' }}"
vm_cpu_model_name: ""
# vm_cpu_model_name: "Skylake-Client-noTSX-IBRS"
vm_cpu_features: []
# vm_cpu_features:
#   - ssbd
#   - name: mpx
#     policy: disable
vm_seclabel: "system_u:system_r:svirt_t:s0:c{{ home_net.vm.vlan }},c{{ __host_num }}"
vm_qemu_args: []

vm_data_disks: []
# vm_data_disks: ["200G", "150G"]

vm_root_size: "20G"
vm_root_disk:
  name: '{{ inventory_hostname }}-root01.{{ vm_disk_format }}'
  format: "{{ vm_disk_format }}"
  device: 'disk'
  capacity: "{{ vm_root_size }}"
  clone_image: "{{ vm_template }}"
  serial: "root01"
  pool: "{{ vm_disk_pool }}"
  driver_options:
    discard: "unmap"

vm_default_nic:
  type: bridge
  source:
    dev: 'VM'
  address: "{{ ansible_host }}"
  domain: "{{ all_net.vm.domain }}"
  gateway: "{{ home_net.vm.cidr | ansible.utils.ipaddr('1') | ansible.utils.ipaddr('address') }}"
  dns_servers:
    - "{{ home_net.vm.cidr | ansible.utils.ipaddr('1') | ansible.utils.ipaddr('address') }}"
    - 1.1.1.1
    - 8.8.8.8

vm_nics: ["{{ vm_default_nic }}"]

vm_default_definition:
  state: present
  machine: q35
  start: "{{ vm_started }}"
  autostart: "{{ vm_started }}"
  customize: "{{ vm_customize }}"
  enable_console: true
  enable_vnc: false
  enable_guest_virtio: true
  name: "{{ inventory_hostname }}"
  domain: "{{ vm_default_nic.domain | default(false) }}"
  memory_mb: "{{ vm_mem }}"
  vcpus: "{{ vm_cpus }}"
  boot_firmware: efi
  os_id: "{{ vm_os_id }}"
  volumes: "{{ [vm_root_disk] + vm_extra_disks }}"
  interfaces: "{{ vm_nics }}"
  cpu_mode: "{{ vm_cpu_mode }}"
  cpu_model_name: "{{ vm_cpu_model_name }}"
  cpu_features: "{{ vm_cpu_features }}"
  seclabel_options:
    type: "static"
    relabel: "yes"
    model: "selinux"
  seclabel_label: "{{ vm_seclabel }}"
  qemu_commandline_args: "{{ vm_qemu_args }}"

libvirt_vms: ["{{ vm_default_definition }}"]

resolved_config:
  DNS: "{{ all_net[vm_default_nic.source.dev | lower].cidr | ansible.utils.ipaddr('1') | ansible.utils.ipaddr('address') }}"
  FallbackDNS: "1.1.1.1 8.8.8.8"
  Domains: "{{ domains['hb'] }} vm.{{ domains['hb'] }}"

networkd_config: >-
  {%- set tmp = {} -%}
  {%- for nic in vm_nics -%}
  {%- set v4_prefix = all_net[nic.source.dev | lower].cidr | ansible.utils.ipaddr('prefix') -%}
  {%- set config = {
    "name": 'enp' + (nic.bus | default(loop.index) | string) + 's0',
    "addresses": [nic.address + '/' + (v4_prefix | string)],
    "dns_servers": nic.dns_servers | default([]),
    "mtu": nic.mtu | default(1500),
    "gateway": nic.gateway,
  } -%}
  {%- if ansible_host6 | default(false) -%}
  {%- set v6_prefix = all_net[nic.source.dev | lower].cidr6 | ansible.utils.ipaddr('prefix') -%}
  {{- config['addresses'].append(ansible_host6 + '/' + (v6_prefix | string)) -}}
  {%- endif -%}
  {{- tmp.update({
      config.name: lookup('template', repo_base_dir + '/files/networkd.network.j2', template_vars=config)
    }) -}}
  {%- endfor -%}
  {{ tmp }}
