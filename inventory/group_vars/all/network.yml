---

__host_num: "{{ ansible_host.rsplit('.', 1)[-1] }}"

### The subnet dream ###
# .0/28, 0000::/80 - Switches, routers, APs (CROSS VLAN)
# .16/28, 0001::/80 - Hosts (CROSS VLAN)
# .32/27, 0002::/80 - VIPs (CROSS VLAN)
# .64/26, .128/25, 00003:/80 - VMs, clients

home_net:
  vm:
    cidr: "10.0.10.0/24"
    cidr6: "fd00:10::0/64"
    vlan: 10
    mt_lists: [LAN, NOSEC]
  general:
    cidr: "10.0.50.0/24"
    cidr6: "fd00:50::0/64"
    vlan: 50
    mt_lists: [LAN, NOSEC]
  mgmt:
    cidr: "10.0.100.0/24"
    cidr6: "fd00:100::0/64"
    vlan: 100
    mt_lists: [LAN, SEC]

internal_net:
  san:
    cidr: "10.0.2.0/24"
    cidr6: "fd00:2::0/64"
    vlan: 2
    mtu: 9000
    mt_lists: [LAN, SEC, NOWAN, NOROUTE]
  kube:
    cidr: "10.85.0.0/16"

wg_net:
  mt:
    cidr: "10.4.20.0/24"
    cidr6: "fd00:4:20::0/64"

all_net: "{{ home_net | combine(internal_net, wg_net) }}"

subnet_overrides:
  kube:
    svc:
      - "{{ all_net.kube.cidr | ansible.utils.ipsubnet(18, 0) }}"    # 10.85.0.0/18
    pod:
      - "{{ all_net.kube.cidr | ansible.utils.ipsubnet(18, 1) }}"    # 10.85.64.0/18
    lb:
      - "{{ all_net.kube.cidr | ansible.utils.ipsubnet(26, 512) }}"  # 10.85.128.0/26
    mon:
      - "{{ all_net.kube.cidr | ansible.utils.ipsubnet(26, 513) }}"  # 10.85.128.64/26

subnets: "{{ home_net | combine(internal_net) | default_subnet | combine(subnet_overrides) }}"

# List of IPs with same number in a subnet
# "{{ subnets | dict2items | map(attribute='value') | map(attribute='vips') | ansible.utils.ipv4 | ipaddr(2) | ipaddr('address') }}"
vips:
  # Consider using list and ansible.utils.reduce_on_network instead?
  vm:
    ceph_nfs: "{{ all_net.vm.cidr | ipaddr_concat(210) }}"  # 10.0.10.210
    ceph_rgw: "{{ all_net.vm.cidr | ipaddr_concat(20) }}"   # 10.0.10.20
    kube_cp: "{{ all_net.vm.cidr | ipaddr_concat(50) }}"    # 10.0.10.50
  general:
    ceph_nfs: "{{ all_net.general.cidr | ipaddr_concat(20) }}"  # 10.0.50.20
  san:
    ceph_nfs: "{{ subnets.san.vips | ansible.utils.ipv4 | ipaddr_concat(1) }}"  # 10.0.2.33
  kube:
    nginx: "{{ subnets.kube.lb | ipaddr_concat(1) }}"  # 10.85.128.1
    prom: "{{ subnets.kube.lb | ipaddr_concat(2) }}"   # 10.85.128.2

# Pretty nasty, might be easier with lists
vips_with_prefix: >-
  {%- set tmp = {} -%}
  {%- for net_name, nets in vips.items() -%}
  {%- set tmp2 = {} -%}
  {%- for name, addr in nets.items() -%}
  {{- tmp2.update({name: addr + "/" + (all_net[net_name].cidr | ansible.utils.ipaddr('prefix') | string)}) -}}
  {%- endfor -%}
  {{- tmp.update({net_name: tmp2}) -}}
  {%- endfor -%}
  {{ tmp }}

# These do not necessarily exist, but are useful for automation
host_ips: >-
  {%- set tmp = {} -%}
  {%- for k, v in all_net.items() -%}
  {{- tmp.update({k: v.cidr | ansible.utils.ipaddr(__host_num) | ansible.utils.ipaddr('address')}) -}}
  {%- endfor -%}
  {{ tmp }}
