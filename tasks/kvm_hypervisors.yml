---

- name: Check if RTC is using local time
  ansible.builtin.command:
    cmd: timedatectl show -p LocalRTC
  check_mode: false
  changed_when: false
  register: __rtc_local
  tags: ["rtc"]

- name: Ensure system clock is using UTC
  ansible.builtin.command:
    cmd: timedatectl set-local-rtc 0
  when: __rtc_local.stdout.strip() == 'LocalRTC=yes'
  tags: ["rtc"]

- name: Btrfs tasks
  tags: ["btrfs"]
  when:
    - btrfs_src | default('')
    - btrfs_root | default('')
  block:
    - name: Mount btrfs root
      ansible.posix.mount:
        src: "{{ btrfs_src }}"
        path: "{{ btrfs_root }}"
        fstype: btrfs
        opts: "subvolid=5,{{ btrfs_opts }}"
        state: mounted
      tags: ["subvols"]

    - name: Get existing subvolumes
      ansible.builtin.shell: "set -o pipefail; btrfs sub list -t {{ btrfs_root }} | tail -n+3 | awk '{ print $4 }'"
      check_mode: false
      changed_when: false
      register: __subvols
      tags: ["subvols"]

    - name: Create missing subvolumes
      ansible.builtin.command: "btrfs sub create {{ btrfs_root }}/{{ item }}"
      loop: "{{ btrfs_subvols | default([]) }}"
      when: item not in __subvols.stdout_lines
      tags: ["subvols"]

    - name: Create root snapshots dir
      ansible.builtin.file:
        path: "/.snapshots"
        state: directory
        owner: root
        group: root
        mode: 0755
      tags: ["snapshots"]

    - name: Mount snapshots subvolume
      ansible.posix.mount:
        src: "{{ btrfs_src }}"
        path: /.snapshots
        fstype: btrfs
        opts: "subvol=@snapshots,{{ btrfs_opts }}"
        state: mounted
      tags: ["snapshots"]

    - name: Create swap dir
      ansible.builtin.file:
        path: "{{ swapfile_path | dirname }}"
        state: directory
        owner: root
        group: root
        mode: 0700
      when: swapfile_path | default('')
      tags: ["swap"]

    - name: Mount swap subvolume
      ansible.posix.mount:
        src: "{{ btrfs_src }}"
        path: "{{ swapfile_path | dirname }}"
        fstype: btrfs
        opts: "subvol=@swap,{{ btrfs_opts }}"
        state: mounted
      when: swapfile_path | default('')
      tags: ["swap"]

    - name: Set no COW attribute
      ansible.builtin.file:
        path: "{{ item }}"
        attributes: +C
      loop: "{{ btrfs_nocow_paths | default([]) }}"
      tags: ["swap"]

- name: Setup swap file
  ansible.builtin.include_role:
    name: swapfile
    apply:
      tags: ["swap"]
  when: swapfile_path | default('')
  tags: ["swap"]

- name: Install and configure cpupower
  ansible.builtin.include_role:
    name: cpupower
    apply:
      tags: ["cpupower"]
  tags: ["cpupower"]

- name: Install libvirt
  ansible.builtin.include_role:
    name: libvirt
    apply:
      tags: ["libvirt"]
  tags: ["libvirt"]

- name: Install and configure cockpit
  ansible.builtin.include_role:
    name: cockpit
    apply:
      tags: ["cockpit"]
  tags: ["cockpit"]

- name: Symlink cockpit certs
  ansible.builtin.file:
    src: "/etc/pki/tls/{{ 'certs' if item == 'crt' else 'private' }}/{{ domain }}.{{ item }}"
    dest: "/etc/cockpit/ws-certs.d/99-live.{{ item }}"
    follow: false
    state: link
  loop: ["crt", "key"]
  tags: ["cockpit"]

- name: Install postfix
  ansible.builtin.include_role:
    name: postfix
    apply:
      tags: ["postfix"]
  tags: ["postfix"]

- name: Install and configure smartd
  ansible.builtin.include_role:
    name: smartd
    apply:
      tags: ["smartd"]
  tags: ["smartd"]
