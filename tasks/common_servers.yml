---

- name: Configure /etc/resolv.conf
  ansible.builtin.copy:
    content: "{{ resolv_config }}"
    dest: /etc/resolv.conf
    owner: root
    group: root
    mode: "0644"
    follow: false
  when: resolv_config | default('')
  tags: ["resolv"]

- name: Setup systemd-networkd
  ansible.builtin.include_role:
    name: systemd_networkd
    apply:
      tags: ["networkd"]
  when: networkd_config | default(false) or
        networkd_netdevs | default(false) or
        networkd_links | default(false)
  tags: ["networkd"]

- name: Setup disks
  ansible.builtin.include_role:
    name: setup_disks
    apply:
      tags: ["disk"]
  tags: ["disk"]

- name: Setup btrfs
  ansible.builtin.include_role:
    name: btrfs
    apply:
      tags: ["btrfs"]
  when: btrfs_scrub_targets | default([])
  tags: ["btrfs"]

- name: Setup swapfile
  ansible.builtin.include_role:
    name: swapfile
    apply:
      tags: ["swap"]
  when: swapfile_path | default(false) or swapfile_size | default(false)
  tags: ["swap"]

- name: Configure firewall
  ansible.builtin.include_role:
    name: firewall_config
    apply:
      tags: ["firewall", "firewalld", "ufw"]
  when: firewall_enabled | default(true)
  tags: ["firewall", "firewalld", "ufw"]

- name: Configure sshd
  ansible.builtin.include_role:
    name: sshd
    apply:
      tags: ["sshd"]
  tags: ["sshd"]

- name: Configure auto upgrades (Debian)
  ansible.builtin.include_role:
    name: unattended-upgrades
    apply:
      tags: ["upgrades", "unattended-upgrades"]
  when: ansible_os_family == 'Debian'
  tags: ["upgrades", "unattended-upgrades"]

- name: Configure auto upgrades (RedHat)
  ansible.builtin.include_role:
    name: cosandr.dnf_automatic
    apply:
      tags: ["upgrades", "dnf_automatic"]
  when: ansible_os_family == 'RedHat'
  tags: ["upgrades", "dnf_automatic"]

- name: Setup node exporter
  ansible.builtin.include_role:
    name: node_exporter
    apply:
      tags: ["node_exporter"]
  when:
    - node_exporter_port is defined
    - node_exporter_port
    - node_exporter_installed | default(true)
  tags: ["node_exporter"]

- name: Setup NVMe exporter
  ansible.builtin.include_role:
    name: nvme_exporter
    apply:
      tags: ["nvme_exporter"]
  when: nvme_exporter_port | default(false)
  tags: ["nvme_exporter"]

- name: Setup promtail
  ansible.builtin.include_role:
    name: promtail
    apply:
      tags: ["promtail"]
  when:
    - promtail_installed | default(true)
    - promtail_scrape_configs | default([])
  tags: ["promtail"]

- name: Setup SSL cert sync
  ansible.builtin.include_role:
    name: pg_cert_store
    apply:
      tags: ["pg_cert", "ssl"]
  when: pg_cert_installed | default(false)
  tags: ["pg_cert", "ssl"]

- name: Configure NFS
  ansible.builtin.include_role:
    name: nfs
    apply:
      tags: ["nfs"]
  tags: ["nfs"]

- name: Ensure fstrim timer is enabled
  ansible.builtin.systemd:
    name: fstrim.timer
    state: started
    enabled: true
  when: fstrim_timer_enabled | default(false)
  tags: ["fstrim"]

- name: Check if dnf.conf exists
  ansible.builtin.stat:
    path: /etc/dnf/dnf.conf
  register: __dnf_conf
  tags: ["dnf"]

- name: Disable deltarpm
  community.general.ini_file:
    path: /etc/dnf/dnf.conf
    create: false
    no_extra_spaces: true
    section: main
    option: deltarpm
    value: false
  when: __dnf_conf.stat.exists
  tags: ["dnf"]

- name: Setup SELinux policies
  ansible.builtin.include_role:
    name: selinux_modules
    apply:
      tags: ["selinux", "selinux_modules"]
  when:
    - ansible_os_family == 'RedHat'
    - selinux_modules | default([])
  tags: ["selinux", "selinux_modules"]

- name: Setup NUT
  ansible.builtin.include_role:
    name: nut
    apply:
      tags: ["nut"]
  when: nut_upses | default([]) or nut_monitors | default([])
  tags: ["nut"]
