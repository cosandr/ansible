{{ ansible_managed | comment }}
{% if nginx_upstreams | selectattr('name', 'search', 'jellyfin') %}
{% set domain = domains['dv'] %}
server {
    {{ nginx_listen_http | indent(4) }}
    server_name jellyfin.{{ domain }};
    return 301 https://$host$request_uri;
}

server {
    {{ nginx_listen_https | indent(4) }}
    http2 on;
    server_name jellyfin.{{ domain }};

    ssl_certificate /etc/lego/certificates/{{ domain }}.crt;
    ssl_certificate_key /etc/lego/certificates/{{ domain }}.key;

    access_log {{ nginx_sites_logs }}/access-jellyfin.{{ domain }}.log {{ nginx_access_log_options }};
    error_log {{ nginx_sites_logs }}/error-jellyfin.{{ domain }}.log {{ nginx_error_log_options }};

    add_header Strict-Transport-Security "max-age=31536000" always;

    # Security / XSS Mitigation Headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";#
    # Content Security Policy
    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
    # Enforces https content and restricts JS/CSS to origin
    # External Javascript (such as cast_sender.js for Chromecast or YouTube embed JS for external trailers) must be whitelisted.
    add_header Content-Security-Policy "default-src https: data: blob:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com/cv/js/sender/v1/cast_sender.js https://www.youtube.com/iframe_api https://s.ytimg.com; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'";#
    location / {
        # Proxy main Jellyfin traffic
        proxy_pass http://jellyfin/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;#
        # Disable buffering when the nginx proxy gets very resource heavy upon streaming
        proxy_buffering off;
    }
    location /socket {
        # Proxy Jellyfin Websockets traffic
        proxy_pass http://jellyfin/socket;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }
}
{% endif %}
