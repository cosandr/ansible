# https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
---

crds:
  upgradeJob:
    enabled: true

alertmanager:
  enabled: true
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - "am.{{ kube_ingress_domain }}"
    paths:
      - /
    pathType: ImplementationSpecific
    annotations:
      nginx.ingress.kubernetes.io/whitelist-source-range: "{{ firewall_trusted_sources | join(',') }}"

  alertmanagerSpec:
    externalUrl: "http://am.{{ kube_ingress_domain }}"
    retention: 192h

  templateFiles: {{ alertmanager_template_files | to_json }}

  config:
    route:
      repeat_interval: 168h
{% if vault_alertmanager_discord_webhook_url is defined %}
      receiver: discord
{% else %}
      receiver: 'null'
{% endif %}
      routes:
        - receiver: 'null'
          matchers:
            - alertname = "InfoInhibitor"
        - receiver: 'watchdog'
          group_interval: 30s
          repeat_interval: 1m
          matchers:
            - alertname = "Watchdog"
    receivers:
      - name: 'null'
      - name: watchdog
        webhook_configs:
          - url: "{{ vault_alertmanager_watchdog_url }}"
{% if vault_alertmanager_discord_webhook_url is defined %}
      - name: discord
        discord_configs:
          - send_resolved: true
            webhook_url: "{{ vault_alertmanager_discord_webhook_url }}"
            title: '{% raw %}{{ template "discord.andrei.title" . }}{% endraw %}'
            message: '{% raw %}{{ template "discord.andrei.message" . }}{% endraw %}'
{% endif %}
grafana:
  enabled: false
prometheus:
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - "prom.{{ kube_ingress_domain }}"
    paths:
      - /
    pathType: ImplementationSpecific
    annotations:
      nginx.ingress.kubernetes.io/whitelist-source-range: "{{ (firewall_trusted_sources + node_exporter_allow_ips) | join(',') }}"

  prometheusSpec:
    podMonitorSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    externalLabels: {}
    externalUrl: "http://prom.{{ kube_ingress_domain }}"
    retention: 1y
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: nfs-csi
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 20Gi
prometheus-node-exporter:
  extraArgs:
    - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
    - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
# permission denied
{% if 'talos' not in group_names %}
    - --collector.systemd
  extraHostVolumeMounts:
    - name: systemd
      hostPath: /run/dbus/system_bus_socket
      mountPath: /var/run/dbus/system_bus_socket
      readOnly: true
      mountPropagation: None
{% endif %}
{% if 'talos' in group_names %}
kubeControllerManager:
  service:
    selector:
      k8s-app: kube-controller-manager

kubeScheduler:
  service:
    selector:
      k8s-app: kube-scheduler
{% endif %}

kubeProxy:
  enabled: {{ kube_proxy_enabled }}

defaultRules:
  disabled:
    KubePdbNotEnoughHealthyPods: true
  rules:
    kubeProxy: {{ kube_proxy_enabled }}
